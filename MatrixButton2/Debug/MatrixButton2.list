
MatrixButton2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d30  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003030  08003030  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003038  08003038  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800303c  0800303c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08003040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  200000b0  080030f0  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  080030f0  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008088  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000159a  00000000  00000000  00028168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  00029708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  00029e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001602d  00000000  00000000  0002a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083a4  00000000  00000000  0004049d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e64  00000000  00000000  00048841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf6a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e8  00000000  00000000  000cf6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002eb0 	.word	0x08002eb0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	08002eb0 	.word	0x08002eb0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fd4e 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f84e 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8e0 	bl	80006ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8b4 	bl	8000658 <MX_USART2_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Call function every 10 ms = 100Hz
	  static uint32_t timestamp=0;
	  if(HAL_GetTick()>=timestamp)
 80004f0:	f000 fdac 	bl	800104c <HAL_GetTick>
 80004f4:	4602      	mov	r2, r0
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <main+0x90>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d3f8      	bcc.n	80004f0 <main+0x14>
	  {
		  timestamp =HAL_GetTick() + 10;
 80004fe:	f000 fda5 	bl	800104c <HAL_GetTick>
 8000502:	4603      	mov	r3, r0
 8000504:	330a      	adds	r3, #10
 8000506:	4a19      	ldr	r2, [pc, #100]	; (800056c <main+0x90>)
 8000508:	6013      	str	r3, [r2, #0]
		  ReadMatrixButton_1Row();
 800050a:	f000 f98d 	bl	8000828 <ReadMatrixButton_1Row>
		if(ButtonMatrix == 0){
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <main+0x94>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d102      	bne.n	800051c <main+0x40>
			ButtonMatixtemp = 0;
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <main+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	801a      	strh	r2, [r3, #0]
		}
		if(ButtonMatixtemp != ButtonMatrix && ButtonMatrix != 0){
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <main+0x98>)
 800051e:	881a      	ldrh	r2, [r3, #0]
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <main+0x94>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	429a      	cmp	r2, r3
 8000526:	d0e3      	beq.n	80004f0 <main+0x14>
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <main+0x94>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0df      	beq.n	80004f0 <main+0x14>
			check += 1;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <main+0x9c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	4a10      	ldr	r2, [pc, #64]	; (8000578 <main+0x9c>)
 8000538:	6013      	str	r3, [r2, #0]
			numberhit = checkbuttonhit(ButtonMatrix);
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <main+0x94>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fa0e 	bl	8000960 <checkbuttonhit>
 8000544:	4603      	mov	r3, r0
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <main+0xa0>)
 800054a:	801a      	strh	r2, [r3, #0]
			press = numpad(numberhit);
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <main+0xa0>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fa37 	bl	80009c4 <numpad>
 8000556:	4602      	mov	r2, r0
 8000558:	460b      	mov	r3, r1
 800055a:	4909      	ldr	r1, [pc, #36]	; (8000580 <main+0xa4>)
 800055c:	e9c1 2300 	strd	r2, r3, [r1]
			ButtonMatixtemp = ButtonMatrix;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <main+0x94>)
 8000562:	881a      	ldrh	r2, [r3, #0]
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <main+0x98>)
 8000566:	801a      	strh	r2, [r3, #0]
  {
 8000568:	e7c2      	b.n	80004f0 <main+0x14>
 800056a:	bf00      	nop
 800056c:	20000128 	.word	0x20000128
 8000570:	20000110 	.word	0x20000110
 8000574:	2000011a 	.word	0x2000011a
 8000578:	20000114 	.word	0x20000114
 800057c:	20000118 	.word	0x20000118
 8000580:	20000120 	.word	0x20000120

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f001 ff86 	bl	80024a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd0>)
 80005ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005f4:	2310      	movs	r3, #16
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fe:	2304      	movs	r3, #4
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000602:	2304      	movs	r3, #4
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	4618      	mov	r0, r3
 800060c:	f000 ffc6 	bl	800159c <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000616:	f000 fb33 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2102      	movs	r1, #2
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fa28 	bl	8001a8c <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000642:	f000 fb1d 	bl	8000c80 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_USART2_UART_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000690:	f001 fc1c 	bl	8001ecc <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800069a:	f000 faf1 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000cc 	.word	0x200000cc
 80006a8:	40004400 	.word	0x40004400

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b54      	ldr	r3, [pc, #336]	; (8000818 <MX_GPIO_Init+0x16c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a53      	ldr	r2, [pc, #332]	; (8000818 <MX_GPIO_Init+0x16c>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b51      	ldr	r3, [pc, #324]	; (8000818 <MX_GPIO_Init+0x16c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <MX_GPIO_Init+0x16c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a4c      	ldr	r2, [pc, #304]	; (8000818 <MX_GPIO_Init+0x16c>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b4a      	ldr	r3, [pc, #296]	; (8000818 <MX_GPIO_Init+0x16c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b46      	ldr	r3, [pc, #280]	; (8000818 <MX_GPIO_Init+0x16c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a45      	ldr	r2, [pc, #276]	; (8000818 <MX_GPIO_Init+0x16c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b43      	ldr	r3, [pc, #268]	; (8000818 <MX_GPIO_Init+0x16c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <MX_GPIO_Init+0x16c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a3e      	ldr	r2, [pc, #248]	; (8000818 <MX_GPIO_Init+0x16c>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b3c      	ldr	r3, [pc, #240]	; (8000818 <MX_GPIO_Init+0x16c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2120      	movs	r1, #32
 8000736:	4839      	ldr	r0, [pc, #228]	; (800081c <MX_GPIO_Init+0x170>)
 8000738:	f000 ff16 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000742:	4836      	ldr	r0, [pc, #216]	; (800081c <MX_GPIO_Init+0x170>)
 8000744:	f000 ff10 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R2_Pin|R4_Pin|R3_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2138      	movs	r1, #56	; 0x38
 800074c:	4834      	ldr	r0, [pc, #208]	; (8000820 <MX_GPIO_Init+0x174>)
 800074e:	f000 ff0b 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000758:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	482e      	ldr	r0, [pc, #184]	; (8000824 <MX_GPIO_Init+0x178>)
 800076a:	f000 fd61 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076e:	2320      	movs	r3, #32
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4825      	ldr	r0, [pc, #148]	; (800081c <MX_GPIO_Init+0x170>)
 8000786:	f000 fd53 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : L4_Pin L1_Pin */
  GPIO_InitStruct.Pin = L4_Pin|L1_Pin;
 800078a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000794:	2301      	movs	r3, #1
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	481f      	ldr	r0, [pc, #124]	; (800081c <MX_GPIO_Init+0x170>)
 80007a0:	f000 fd46 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : L2_Pin */
  GPIO_InitStruct.Pin = L2_Pin;
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <MX_GPIO_Init+0x178>)
 80007b8:	f000 fd3a 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : R1_Pin */
  GPIO_InitStruct.Pin = R1_Pin;
 80007bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007c2:	2311      	movs	r3, #17
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_GPIO_Init+0x170>)
 80007d6:	f000 fd2b 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin R4_Pin R3_Pin */
  GPIO_InitStruct.Pin = R2_Pin|R4_Pin|R3_Pin;
 80007da:	2338      	movs	r3, #56	; 0x38
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007de:	2311      	movs	r3, #17
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0x174>)
 80007f2:	f000 fd1d 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : L3_Pin */
  GPIO_InitStruct.Pin = L3_Pin;
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L3_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_GPIO_Init+0x174>)
 800080a:	f000 fd11 	bl	8001230 <HAL_GPIO_Init>

}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020400 	.word	0x40020400
 8000824:	40020800 	.word	0x40020800

08000828 <ReadMatrixButton_1Row>:

/* USER CODE BEGIN 4 */
void ReadMatrixButton_1Row()
{
 8000828:	b598      	push	{r3, r4, r7, lr}
 800082a:	af00      	add	r7, sp, #0
	//
	static uint8_t X = 0;

	//READ L1-L4
	register int i;
	for(i=0;i<4;i++)
 800082c:	2400      	movs	r4, #0
 800082e:	e031      	b.n	8000894 <ReadMatrixButton_1Row+0x6c>
	{
		if(HAL_GPIO_ReadPin(L[i].PORT, L[i].PIN))
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <ReadMatrixButton_1Row+0xec>)
 8000832:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 8000836:	4937      	ldr	r1, [pc, #220]	; (8000914 <ReadMatrixButton_1Row+0xec>)
 8000838:	00e3      	lsls	r3, r4, #3
 800083a:	440b      	add	r3, r1
 800083c:	889b      	ldrh	r3, [r3, #4]
 800083e:	4619      	mov	r1, r3
 8000840:	4610      	mov	r0, r2
 8000842:	f000 fe79 	bl	8001538 <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d012      	beq.n	8000872 <ReadMatrixButton_1Row+0x4a>
		{

			ButtonMatrix &= ~(1<<(X*4+i));
 800084c:	4b32      	ldr	r3, [pc, #200]	; (8000918 <ReadMatrixButton_1Row+0xf0>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4423      	add	r3, r4
 8000854:	2201      	movs	r2, #1
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	b21b      	sxth	r3, r3
 800085c:	43db      	mvns	r3, r3
 800085e:	b21a      	sxth	r2, r3
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <ReadMatrixButton_1Row+0xf4>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	b21b      	sxth	r3, r3
 8000866:	4013      	ands	r3, r2
 8000868:	b21b      	sxth	r3, r3
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b2b      	ldr	r3, [pc, #172]	; (800091c <ReadMatrixButton_1Row+0xf4>)
 800086e:	801a      	strh	r2, [r3, #0]
 8000870:	e00f      	b.n	8000892 <ReadMatrixButton_1Row+0x6a>

		}
		else
		{
			ButtonMatrix |= 1<<(X*4+i);
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <ReadMatrixButton_1Row+0xf0>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4423      	add	r3, r4
 800087a:	2201      	movs	r2, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	b21a      	sxth	r2, r3
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <ReadMatrixButton_1Row+0xf4>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	b21b      	sxth	r3, r3
 8000888:	4313      	orrs	r3, r2
 800088a:	b21b      	sxth	r3, r3
 800088c:	b29a      	uxth	r2, r3
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <ReadMatrixButton_1Row+0xf4>)
 8000890:	801a      	strh	r2, [r3, #0]
	for(i=0;i<4;i++)
 8000892:	3401      	adds	r4, #1
 8000894:	2c03      	cmp	r4, #3
 8000896:	ddcb      	ble.n	8000830 <ReadMatrixButton_1Row+0x8>

		}
	}
	//SET RX
	HAL_GPIO_WritePin(R[X].PORT, R[X].PIN, 1);
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <ReadMatrixButton_1Row+0xf0>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <ReadMatrixButton_1Row+0xf8>)
 80008a0:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <ReadMatrixButton_1Row+0xf0>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <ReadMatrixButton_1Row+0xf8>)
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	4413      	add	r3, r2
 80008ae:	889b      	ldrh	r3, [r3, #4]
 80008b0:	2201      	movs	r2, #1
 80008b2:	4619      	mov	r1, r3
 80008b4:	f000 fe58 	bl	8001568 <HAL_GPIO_WritePin>
	//RESET RX+1%4
	HAL_GPIO_WritePin(R[(X+1)%4].PORT, R[(X+1)%4].PIN, 0);
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <ReadMatrixButton_1Row+0xf0>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	425a      	negs	r2, r3
 80008c0:	f003 0303 	and.w	r3, r3, #3
 80008c4:	f002 0203 	and.w	r2, r2, #3
 80008c8:	bf58      	it	pl
 80008ca:	4253      	negpl	r3, r2
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <ReadMatrixButton_1Row+0xf8>)
 80008ce:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <ReadMatrixButton_1Row+0xf0>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	425a      	negs	r2, r3
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	f002 0203 	and.w	r2, r2, #3
 80008e2:	bf58      	it	pl
 80008e4:	4253      	negpl	r3, r2
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <ReadMatrixButton_1Row+0xf8>)
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	4413      	add	r3, r2
 80008ec:	889b      	ldrh	r3, [r3, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	4619      	mov	r1, r3
 80008f2:	f000 fe39 	bl	8001568 <HAL_GPIO_WritePin>
	X++;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <ReadMatrixButton_1Row+0xf0>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <ReadMatrixButton_1Row+0xf0>)
 8000900:	701a      	strb	r2, [r3, #0]
	X%=4;
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <ReadMatrixButton_1Row+0xf0>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	f003 0303 	and.w	r3, r3, #3
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b02      	ldr	r3, [pc, #8]	; (8000918 <ReadMatrixButton_1Row+0xf0>)
 800090e:	701a      	strb	r2, [r3, #0]
}
 8000910:	bf00      	nop
 8000912:	bd98      	pop	{r3, r4, r7, pc}
 8000914:	20000020 	.word	0x20000020
 8000918:	2000012c 	.word	0x2000012c
 800091c:	20000110 	.word	0x20000110
 8000920:	20000000 	.word	0x20000000

08000924 <concat>:
int concat(int x, int y) {
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
    int pow = 10;
 800092e:	230a      	movs	r3, #10
 8000930:	60fb      	str	r3, [r7, #12]
    while (y >= pow) {
 8000932:	e005      	b.n	8000940 <concat+0x1c>
        pow *= 10;
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
    while (y >= pow) {
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	daf5      	bge.n	8000934 <concat+0x10>
    }
    return x * pow + y;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	fb03 f202 	mul.w	r2, r3, r2
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	4413      	add	r3, r2
}
 8000954:	4618      	mov	r0, r3
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <checkbuttonhit>:
int checkbuttonhit(uint16_t number){
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
	uint16_t count = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	81fb      	strh	r3, [r7, #14]
	if(number != 0) {
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00a      	beq.n	800098a <checkbuttonhit+0x2a>
	while (number != 1){
 8000974:	e005      	b.n	8000982 <checkbuttonhit+0x22>
		count += 1;
 8000976:	89fb      	ldrh	r3, [r7, #14]
 8000978:	3301      	adds	r3, #1
 800097a:	81fb      	strh	r3, [r7, #14]
		number = number / 2;
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	085b      	lsrs	r3, r3, #1
 8000980:	80fb      	strh	r3, [r7, #6]
	while (number != 1){
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d1f6      	bne.n	8000976 <checkbuttonhit+0x16>
 8000988:	e001      	b.n	800098e <checkbuttonhit+0x2e>
	}
	}
	else {
		count = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	81fb      	strh	r3, [r7, #14]
	}


	return count;
 800098e:	89fb      	ldrh	r3, [r7, #14]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <backspace>:
int backspace(int x) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    return x / 10;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <backspace+0x24>)
 80009a8:	fb82 1203 	smull	r1, r2, r2, r3
 80009ac:	1092      	asrs	r2, r2, #2
 80009ae:	17db      	asrs	r3, r3, #31
 80009b0:	1ad3      	subs	r3, r2, r3
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	66666667 	.word	0x66666667

080009c4 <numpad>:
long long int numpad(int hit){
 80009c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009c8:	b092      	sub	sp, #72	; 0x48
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6478      	str	r0, [r7, #68]	; 0x44
	static long long int numpadcheck = 0;
	switch (hit) {
 80009ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	f200 8124 	bhi.w	8000c1e <numpad+0x25a>
 80009d6:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <numpad+0x18>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	08000a1d 	.word	0x08000a1d
 80009e0:	08000a47 	.word	0x08000a47
 80009e4:	08000a71 	.word	0x08000a71
 80009e8:	08000a9b 	.word	0x08000a9b
 80009ec:	08000ac5 	.word	0x08000ac5
 80009f0:	08000aef 	.word	0x08000aef
 80009f4:	08000b19 	.word	0x08000b19
 80009f8:	08000c1f 	.word	0x08000c1f
 80009fc:	08000b43 	.word	0x08000b43
 8000a00:	08000b6d 	.word	0x08000b6d
 8000a04:	08000b93 	.word	0x08000b93
 8000a08:	08000c1f 	.word	0x08000c1f
 8000a0c:	08000bb9 	.word	0x08000bb9
 8000a10:	08000bcf 	.word	0x08000bcf
 8000a14:	08000c1f 	.word	0x08000c1f
 8000a18:	08000bf3 	.word	0x08000bf3
			case 0:
				printf("You entered 7\n");
 8000a1c:	4886      	ldr	r0, [pc, #536]	; (8000c38 <numpad+0x274>)
 8000a1e:	f001 fdb7 	bl	8002590 <puts>
				numpadcheck = concat(numpadcheck,7);
 8000a22:	4b86      	ldr	r3, [pc, #536]	; (8000c3c <numpad+0x278>)
 8000a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	2107      	movs	r1, #7
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff79 	bl	8000924 <concat>
 8000a32:	4603      	mov	r3, r0
 8000a34:	17da      	asrs	r2, r3, #31
 8000a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000a3a:	4b80      	ldr	r3, [pc, #512]	; (8000c3c <numpad+0x278>)
 8000a3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000a40:	e9c3 1200 	strd	r1, r2, [r3]
				break;
 8000a44:	e0ef      	b.n	8000c26 <numpad+0x262>
	        case 1:
	            printf("You entered 4\n");
 8000a46:	487e      	ldr	r0, [pc, #504]	; (8000c40 <numpad+0x27c>)
 8000a48:	f001 fda2 	bl	8002590 <puts>
	            numpadcheck = concat(numpadcheck,4);
 8000a4c:	4b7b      	ldr	r3, [pc, #492]	; (8000c3c <numpad+0x278>)
 8000a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a52:	4613      	mov	r3, r2
 8000a54:	2104      	movs	r1, #4
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff64 	bl	8000924 <concat>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	17da      	asrs	r2, r3, #31
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
 8000a62:	637a      	str	r2, [r7, #52]	; 0x34
 8000a64:	4b75      	ldr	r3, [pc, #468]	; (8000c3c <numpad+0x278>)
 8000a66:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000a6a:	e9c3 1200 	strd	r1, r2, [r3]
	            break;
 8000a6e:	e0da      	b.n	8000c26 <numpad+0x262>
	        case 2:
	            printf("You entered 1\n");
 8000a70:	4874      	ldr	r0, [pc, #464]	; (8000c44 <numpad+0x280>)
 8000a72:	f001 fd8d 	bl	8002590 <puts>
	            numpadcheck = concat(numpadcheck,1);
 8000a76:	4b71      	ldr	r3, [pc, #452]	; (8000c3c <numpad+0x278>)
 8000a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff4f 	bl	8000924 <concat>
 8000a86:	4603      	mov	r3, r0
 8000a88:	17da      	asrs	r2, r3, #31
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a8e:	4b6b      	ldr	r3, [pc, #428]	; (8000c3c <numpad+0x278>)
 8000a90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000a94:	e9c3 1200 	strd	r1, r2, [r3]
	            break;
 8000a98:	e0c5      	b.n	8000c26 <numpad+0x262>
	        case 3:
	            printf("You entered 0\n");
 8000a9a:	486b      	ldr	r0, [pc, #428]	; (8000c48 <numpad+0x284>)
 8000a9c:	f001 fd78 	bl	8002590 <puts>
	            numpadcheck = concat(numpadcheck,0);
 8000aa0:	4b66      	ldr	r3, [pc, #408]	; (8000c3c <numpad+0x278>)
 8000aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff3a 	bl	8000924 <concat>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	17da      	asrs	r2, r3, #31
 8000ab4:	623b      	str	r3, [r7, #32]
 8000ab6:	627a      	str	r2, [r7, #36]	; 0x24
 8000ab8:	4b60      	ldr	r3, [pc, #384]	; (8000c3c <numpad+0x278>)
 8000aba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000abe:	e9c3 1200 	strd	r1, r2, [r3]
	            break;
 8000ac2:	e0b0      	b.n	8000c26 <numpad+0x262>
	        case 4:
	            printf("You entered 8\n");
 8000ac4:	4861      	ldr	r0, [pc, #388]	; (8000c4c <numpad+0x288>)
 8000ac6:	f001 fd63 	bl	8002590 <puts>
	            numpadcheck = concat(numpadcheck,8);
 8000aca:	4b5c      	ldr	r3, [pc, #368]	; (8000c3c <numpad+0x278>)
 8000acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff25 	bl	8000924 <concat>
 8000ada:	4603      	mov	r3, r0
 8000adc:	17da      	asrs	r2, r3, #31
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	61fa      	str	r2, [r7, #28]
 8000ae2:	4b56      	ldr	r3, [pc, #344]	; (8000c3c <numpad+0x278>)
 8000ae4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000ae8:	e9c3 1200 	strd	r1, r2, [r3]
	            break;
 8000aec:	e09b      	b.n	8000c26 <numpad+0x262>
	        case 5:
	            printf("You entered 5\n");
 8000aee:	4858      	ldr	r0, [pc, #352]	; (8000c50 <numpad+0x28c>)
 8000af0:	f001 fd4e 	bl	8002590 <puts>
	            numpadcheck = concat(numpadcheck,5);
 8000af4:	4b51      	ldr	r3, [pc, #324]	; (8000c3c <numpad+0x278>)
 8000af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afa:	4613      	mov	r3, r2
 8000afc:	2105      	movs	r1, #5
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff10 	bl	8000924 <concat>
 8000b04:	4603      	mov	r3, r0
 8000b06:	17da      	asrs	r2, r3, #31
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	617a      	str	r2, [r7, #20]
 8000b0c:	4b4b      	ldr	r3, [pc, #300]	; (8000c3c <numpad+0x278>)
 8000b0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000b12:	e9c3 1200 	strd	r1, r2, [r3]
	            break;
 8000b16:	e086      	b.n	8000c26 <numpad+0x262>
	        case 6:
	            printf("You entered 2\n");
 8000b18:	484e      	ldr	r0, [pc, #312]	; (8000c54 <numpad+0x290>)
 8000b1a:	f001 fd39 	bl	8002590 <puts>
	            numpadcheck = concat(numpadcheck,2);
 8000b1e:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <numpad+0x278>)
 8000b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b24:	4613      	mov	r3, r2
 8000b26:	2102      	movs	r1, #2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fefb 	bl	8000924 <concat>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	17da      	asrs	r2, r3, #31
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	60fa      	str	r2, [r7, #12]
 8000b36:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <numpad+0x278>)
 8000b38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000b3c:	e9c3 1200 	strd	r1, r2, [r3]
	            break;
 8000b40:	e071      	b.n	8000c26 <numpad+0x262>
	        case 8:
	            printf("You entered 9\n");
 8000b42:	4845      	ldr	r0, [pc, #276]	; (8000c58 <numpad+0x294>)
 8000b44:	f001 fd24 	bl	8002590 <puts>
	            numpadcheck = concat(numpadcheck,9);
 8000b48:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <numpad+0x278>)
 8000b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	2109      	movs	r1, #9
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fee6 	bl	8000924 <concat>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	17da      	asrs	r2, r3, #31
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <numpad+0x278>)
 8000b62:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000b66:	e9c3 1200 	strd	r1, r2, [r3]
	            break;
 8000b6a:	e05c      	b.n	8000c26 <numpad+0x262>
	        case 9:
	            printf("You entered 6\n");
 8000b6c:	483b      	ldr	r0, [pc, #236]	; (8000c5c <numpad+0x298>)
 8000b6e:	f001 fd0f 	bl	8002590 <puts>
	            numpadcheck = concat(numpadcheck,6);
 8000b72:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <numpad+0x278>)
 8000b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	2106      	movs	r1, #6
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fed1 	bl	8000924 <concat>
 8000b82:	4603      	mov	r3, r0
 8000b84:	17da      	asrs	r2, r3, #31
 8000b86:	469a      	mov	sl, r3
 8000b88:	4693      	mov	fp, r2
 8000b8a:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <numpad+0x278>)
 8000b8c:	e9c3 ab00 	strd	sl, fp, [r3]
	            break;
 8000b90:	e049      	b.n	8000c26 <numpad+0x262>
	        case 10:
	            printf("You entered 3\n");
 8000b92:	4833      	ldr	r0, [pc, #204]	; (8000c60 <numpad+0x29c>)
 8000b94:	f001 fcfc 	bl	8002590 <puts>
	            numpadcheck = concat(numpadcheck,3);
 8000b98:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <numpad+0x278>)
 8000b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff febe 	bl	8000924 <concat>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	17da      	asrs	r2, r3, #31
 8000bac:	4698      	mov	r8, r3
 8000bae:	4691      	mov	r9, r2
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <numpad+0x278>)
 8000bb2:	e9c3 8900 	strd	r8, r9, [r3]
	            break;
 8000bb6:	e036      	b.n	8000c26 <numpad+0x262>
	        case 12:
	            printf("You entered clear\n");
 8000bb8:	482a      	ldr	r0, [pc, #168]	; (8000c64 <numpad+0x2a0>)
 8000bba:	f001 fce9 	bl	8002590 <puts>
	            numpadcheck = 0;
 8000bbe:	491f      	ldr	r1, [pc, #124]	; (8000c3c <numpad+0x278>)
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	e9c1 2300 	strd	r2, r3, [r1]
	            break;
 8000bcc:	e02b      	b.n	8000c26 <numpad+0x262>
	        case 13:
	            printf("You entered backspace\n");
 8000bce:	4826      	ldr	r0, [pc, #152]	; (8000c68 <numpad+0x2a4>)
 8000bd0:	f001 fcde 	bl	8002590 <puts>
	            numpadcheck = backspace(numpadcheck);
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <numpad+0x278>)
 8000bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fedd 	bl	800099c <backspace>
 8000be2:	4603      	mov	r3, r0
 8000be4:	17da      	asrs	r2, r3, #31
 8000be6:	461c      	mov	r4, r3
 8000be8:	4615      	mov	r5, r2
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <numpad+0x278>)
 8000bec:	e9c3 4500 	strd	r4, r5, [r3]
	            break;
 8000bf0:	e019      	b.n	8000c26 <numpad+0x262>
	        case 15:
	            printf("You entered ok\n");
 8000bf2:	481e      	ldr	r0, [pc, #120]	; (8000c6c <numpad+0x2a8>)
 8000bf4:	f001 fccc 	bl	8002590 <puts>
	    		if(press == 4210957867){
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <numpad+0x2ac>)
 8000bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfe:	491d      	ldr	r1, [pc, #116]	; (8000c74 <numpad+0x2b0>)
 8000c00:	4411      	add	r1, r2
 8000c02:	430b      	orrs	r3, r1
 8000c04:	d105      	bne.n	8000c12 <numpad+0x24e>
	    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2120      	movs	r1, #32
 8000c0a:	481b      	ldr	r0, [pc, #108]	; (8000c78 <numpad+0x2b4>)
 8000c0c:	f000 fcac 	bl	8001568 <HAL_GPIO_WritePin>
	    		}
	    		else{
	    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	    		}
	            break;
 8000c10:	e009      	b.n	8000c26 <numpad+0x262>
	    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2120      	movs	r1, #32
 8000c16:	4818      	ldr	r0, [pc, #96]	; (8000c78 <numpad+0x2b4>)
 8000c18:	f000 fca6 	bl	8001568 <HAL_GPIO_WritePin>
	            break;
 8000c1c:	e003      	b.n	8000c26 <numpad+0x262>
	        default:
	            printf("Invalid input\n");
 8000c1e:	4817      	ldr	r0, [pc, #92]	; (8000c7c <numpad+0x2b8>)
 8000c20:	f001 fcb6 	bl	8002590 <puts>
	            break;
 8000c24:	bf00      	nop
	    }
	return numpadcheck;
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <numpad+0x278>)
 8000c28:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	4619      	mov	r1, r3
 8000c30:	3748      	adds	r7, #72	; 0x48
 8000c32:	46bd      	mov	sp, r7
 8000c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c38:	08002ec8 	.word	0x08002ec8
 8000c3c:	20000130 	.word	0x20000130
 8000c40:	08002ed8 	.word	0x08002ed8
 8000c44:	08002ee8 	.word	0x08002ee8
 8000c48:	08002ef8 	.word	0x08002ef8
 8000c4c:	08002f08 	.word	0x08002f08
 8000c50:	08002f18 	.word	0x08002f18
 8000c54:	08002f28 	.word	0x08002f28
 8000c58:	08002f38 	.word	0x08002f38
 8000c5c:	08002f48 	.word	0x08002f48
 8000c60:	08002f58 	.word	0x08002f58
 8000c64:	08002f68 	.word	0x08002f68
 8000c68:	08002f7c 	.word	0x08002f7c
 8000c6c:	08002f94 	.word	0x08002f94
 8000c70:	20000120 	.word	0x20000120
 8000c74:	0501e1d5 	.word	0x0501e1d5
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	08002fa4 	.word	0x08002fa4

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 fa7c 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <HAL_UART_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12b      	bne.n	8000d56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d36:	230c      	movs	r3, #12
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d46:	2307      	movs	r3, #7
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_UART_MspInit+0x8c>)
 8000d52:	f000 fa6d 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40004400 	.word	0x40004400
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f934 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	e00a      	b.n	8000de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dd2:	f3af 8000 	nop.w
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	b2ca      	uxtb	r2, r1
 8000de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf0      	blt.n	8000dd2 <_read+0x12>
	}

return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e009      	b.n	8000e20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbf1      	blt.n	8000e0c <_write+0x12>
	}
	return len;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_close>:

int _close(int file)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_isatty>:

int _isatty(int file)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
	return 1;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f001 fac0 	bl	8002450 <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20020000 	.word	0x20020000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	20000138 	.word	0x20000138
 8000f04:	20000150 	.word	0x20000150

08000f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <SystemInit+0x20>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <SystemInit+0x20>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f32:	490e      	ldr	r1, [pc, #56]	; (8000f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f48:	4c0b      	ldr	r4, [pc, #44]	; (8000f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f56:	f7ff ffd7 	bl	8000f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f001 fa7f 	bl	800245c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5e:	f7ff fabd 	bl	80004dc <main>
  bx  lr    
 8000f62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000f70:	08003040 	.word	0x08003040
  ldr r2, =_sbss
 8000f74:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000f78:	20000150 	.word	0x20000150

08000f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC_IRQHandler>
	...

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <HAL_Init+0x40>)
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_Init+0x40>)
 8000f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x40>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f90d 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fe6a 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023c00 	.word	0x40023c00

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f917 	bl	8001216 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f8ed 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000040 	.word	0x20000040
 800101c:	20000048 	.word	0x20000048
 8001020:	20000044 	.word	0x20000044

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000048 	.word	0x20000048
 8001048:	2000013c 	.word	0x2000013c

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000013c 	.word	0x2000013c

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff47 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff5c 	bl	80010ac <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffb0 	bl	8001184 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e159      	b.n	8001500 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 8148 	bne.w	80014fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d005      	beq.n	8001282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127e:	2b02      	cmp	r3, #2
 8001280:	d130      	bne.n	80012e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b8:	2201      	movs	r2, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 0201 	and.w	r2, r3, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d017      	beq.n	8001320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d123      	bne.n	8001374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	69b9      	ldr	r1, [r7, #24]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a2 	beq.w	80014fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b57      	ldr	r3, [pc, #348]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a56      	ldr	r2, [pc, #344]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b54      	ldr	r3, [pc, #336]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d2:	4a52      	ldr	r2, [pc, #328]	; (800151c <HAL_GPIO_Init+0x2ec>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a49      	ldr	r2, [pc, #292]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0x202>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a48      	ldr	r2, [pc, #288]	; (8001524 <HAL_GPIO_Init+0x2f4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0x1fe>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a47      	ldr	r2, [pc, #284]	; (8001528 <HAL_GPIO_Init+0x2f8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00d      	beq.n	800142a <HAL_GPIO_Init+0x1fa>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a46      	ldr	r2, [pc, #280]	; (800152c <HAL_GPIO_Init+0x2fc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x1f6>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a45      	ldr	r2, [pc, #276]	; (8001530 <HAL_GPIO_Init+0x300>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_GPIO_Init+0x1f2>
 800141e:	2304      	movs	r3, #4
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001422:	2307      	movs	r3, #7
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x204>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x204>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4935      	ldr	r1, [pc, #212]	; (800151c <HAL_GPIO_Init+0x2ec>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_GPIO_Init+0x304>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001476:	4a2f      	ldr	r2, [pc, #188]	; (8001534 <HAL_GPIO_Init+0x304>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800147c:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_GPIO_Init+0x304>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a0:	4a24      	ldr	r2, [pc, #144]	; (8001534 <HAL_GPIO_Init+0x304>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <HAL_GPIO_Init+0x304>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ca:	4a1a      	ldr	r2, [pc, #104]	; (8001534 <HAL_GPIO_Init+0x304>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_GPIO_Init+0x304>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <HAL_GPIO_Init+0x304>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f aea2 	bls.w	800124c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40013800 	.word	0x40013800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40021000 	.word	0x40021000
 8001534:	40013c00 	.word	0x40013c00

08001538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e001      	b.n	800155a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001584:	e003      	b.n	800158e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	041a      	lsls	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	619a      	str	r2, [r3, #24]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e267      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d075      	beq.n	80016a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ba:	4b88      	ldr	r3, [pc, #544]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d00c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c6:	4b85      	ldr	r3, [pc, #532]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d112      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4b82      	ldr	r3, [pc, #520]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015de:	d10b      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	4b7e      	ldr	r3, [pc, #504]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d05b      	beq.n	80016a4 <HAL_RCC_OscConfig+0x108>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d157      	bne.n	80016a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e242      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d106      	bne.n	8001610 <HAL_RCC_OscConfig+0x74>
 8001602:	4b76      	ldr	r3, [pc, #472]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a75      	ldr	r2, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e01d      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x98>
 800161a:	4b70      	ldr	r3, [pc, #448]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a6f      	ldr	r2, [pc, #444]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a6c      	ldr	r2, [pc, #432]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001634:	4b69      	ldr	r3, [pc, #420]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a68      	ldr	r2, [pc, #416]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800163a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b66      	ldr	r3, [pc, #408]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a65      	ldr	r2, [pc, #404]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fcfa 	bl	800104c <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fcf6 	bl	800104c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e207      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0xc0>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fce6 	bl	800104c <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fce2 	bl	800104c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1f3      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0xe8>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d063      	beq.n	800177a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d11c      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ca:	4b44      	ldr	r3, [pc, #272]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d116      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e1c7      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4937      	ldr	r1, [pc, #220]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	e03a      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_RCC_OscConfig+0x244>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fc9b 	bl	800104c <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fc97 	bl	800104c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e1a8      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4925      	ldr	r1, [pc, #148]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_RCC_OscConfig+0x244>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fc7a 	bl	800104c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fc76 	bl	800104c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e187      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d036      	beq.n	80017f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d016      	beq.n	80017bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_RCC_OscConfig+0x248>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fc5a 	bl	800104c <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff fc56 	bl	800104c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e167      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80017b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x200>
 80017ba:	e01b      	b.n	80017f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_RCC_OscConfig+0x248>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fc43 	bl	800104c <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	e00e      	b.n	80017e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff fc3f 	bl	800104c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d907      	bls.n	80017e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e150      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
 80017dc:	40023800 	.word	0x40023800
 80017e0:	42470000 	.word	0x42470000
 80017e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80017ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ea      	bne.n	80017ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 8097 	beq.w	8001930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001806:	4b81      	ldr	r3, [pc, #516]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10f      	bne.n	8001832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b7d      	ldr	r3, [pc, #500]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a7c      	ldr	r2, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b7a      	ldr	r3, [pc, #488]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182e:	2301      	movs	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d118      	bne.n	8001870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183e:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a73      	ldr	r2, [pc, #460]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184a:	f7ff fbff 	bl	800104c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001852:	f7ff fbfb 	bl	800104c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e10c      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x2ea>
 8001878:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	4a63      	ldr	r2, [pc, #396]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6713      	str	r3, [r2, #112]	; 0x70
 8001884:	e01c      	b.n	80018c0 <HAL_RCC_OscConfig+0x324>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x30c>
 800188e:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	4a5e      	ldr	r2, [pc, #376]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6713      	str	r3, [r2, #112]	; 0x70
 800189a:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a5b      	ldr	r2, [pc, #364]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0x324>
 80018a8:	4b58      	ldr	r3, [pc, #352]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	4b55      	ldr	r3, [pc, #340]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a54      	ldr	r2, [pc, #336]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018ba:	f023 0304 	bic.w	r3, r3, #4
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d015      	beq.n	80018f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff fbc0 	bl	800104c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff fbbc 	bl	800104c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0cb      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e6:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0ee      	beq.n	80018d0 <HAL_RCC_OscConfig+0x334>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fbaa 	bl	800104c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff fba6 	bl	800104c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0b5      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001912:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ee      	bne.n	80018fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800192a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a1 	beq.w	8001a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800193a:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d05c      	beq.n	8001a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d141      	bne.n	80019d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fb7a 	bl	800104c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fb76 	bl	800104c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e087      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69da      	ldr	r2, [r3, #28]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	019b      	lsls	r3, r3, #6
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	085b      	lsrs	r3, r3, #1
 8001992:	3b01      	subs	r3, #1
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	061b      	lsls	r3, r3, #24
 800199e:	491b      	ldr	r1, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fb4f 	bl	800104c <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fb4b 	bl	800104c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e05c      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x416>
 80019d0:	e054      	b.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fb38 	bl	800104c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff fb34 	bl	800104c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e045      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x444>
 80019fe:	e03d      	b.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e038      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40007000 	.word	0x40007000
 8001a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x4ec>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d028      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d121      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d11a      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d111      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	3b01      	subs	r3, #1
 8001a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0cc      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d90c      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b63      	ldr	r3, [pc, #396]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b8      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	494d      	ldr	r1, [pc, #308]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d044      	beq.n	8001bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e07f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e06f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e067      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4934      	ldr	r1, [pc, #208]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff fa66 	bl	800104c <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7ff fa62 	bl	800104c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e04f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 020c 	and.w	r2, r3, #12
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1eb      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d20c      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e032      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4916      	ldr	r1, [pc, #88]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	490e      	ldr	r1, [pc, #56]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c12:	f000 f821 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001c16:	4602      	mov	r2, r0
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	490a      	ldr	r1, [pc, #40]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	5ccb      	ldrb	r3, [r1, r3]
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f9c6 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023c00 	.word	0x40023c00
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	08002fb4 	.word	0x08002fb4
 8001c50:	20000040 	.word	0x20000040
 8001c54:	20000044 	.word	0x20000044

08001c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c5c:	b094      	sub	sp, #80	; 0x50
 8001c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	647b      	str	r3, [r7, #68]	; 0x44
 8001c64:	2300      	movs	r3, #0
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c68:	2300      	movs	r3, #0
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c70:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d00d      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x40>
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	f200 80e1 	bhi.w	8001e44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x34>
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d003      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c8a:	e0db      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c8c:	4b73      	ldr	r3, [pc, #460]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c90:	e0db      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c92:	4b73      	ldr	r3, [pc, #460]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c96:	e0d8      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c98:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca2:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cae:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	099b      	lsrs	r3, r3, #6
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cca:	4622      	mov	r2, r4
 8001ccc:	462b      	mov	r3, r5
 8001cce:	f04f 0000 	mov.w	r0, #0
 8001cd2:	f04f 0100 	mov.w	r1, #0
 8001cd6:	0159      	lsls	r1, r3, #5
 8001cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cdc:	0150      	lsls	r0, r2, #5
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	1a51      	subs	r1, r2, r1
 8001ce6:	6139      	str	r1, [r7, #16]
 8001ce8:	4629      	mov	r1, r5
 8001cea:	eb63 0301 	sbc.w	r3, r3, r1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cfc:	4659      	mov	r1, fp
 8001cfe:	018b      	lsls	r3, r1, #6
 8001d00:	4651      	mov	r1, sl
 8001d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d06:	4651      	mov	r1, sl
 8001d08:	018a      	lsls	r2, r1, #6
 8001d0a:	4651      	mov	r1, sl
 8001d0c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d10:	4659      	mov	r1, fp
 8001d12:	eb63 0901 	sbc.w	r9, r3, r1
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d2a:	4690      	mov	r8, r2
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	eb18 0303 	adds.w	r3, r8, r3
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	462b      	mov	r3, r5
 8001d38:	eb49 0303 	adc.w	r3, r9, r3
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	024b      	lsls	r3, r1, #9
 8001d4e:	4621      	mov	r1, r4
 8001d50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d54:	4621      	mov	r1, r4
 8001d56:	024a      	lsls	r2, r1, #9
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d5e:	2200      	movs	r2, #0
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d68:	f7fe fa36 	bl	80001d8 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4613      	mov	r3, r2
 8001d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d74:	e058      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	099b      	lsrs	r3, r3, #6
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	4611      	mov	r1, r2
 8001d82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d86:	623b      	str	r3, [r7, #32]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d90:	4642      	mov	r2, r8
 8001d92:	464b      	mov	r3, r9
 8001d94:	f04f 0000 	mov.w	r0, #0
 8001d98:	f04f 0100 	mov.w	r1, #0
 8001d9c:	0159      	lsls	r1, r3, #5
 8001d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da2:	0150      	lsls	r0, r2, #5
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4641      	mov	r1, r8
 8001daa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dae:	4649      	mov	r1, r9
 8001db0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dc8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dcc:	eb63 050b 	sbc.w	r5, r3, fp
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	00eb      	lsls	r3, r5, #3
 8001dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dde:	00e2      	lsls	r2, r4, #3
 8001de0:	4614      	mov	r4, r2
 8001de2:	461d      	mov	r5, r3
 8001de4:	4643      	mov	r3, r8
 8001de6:	18e3      	adds	r3, r4, r3
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	464b      	mov	r3, r9
 8001dec:	eb45 0303 	adc.w	r3, r5, r3
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dfe:	4629      	mov	r1, r5
 8001e00:	028b      	lsls	r3, r1, #10
 8001e02:	4621      	mov	r1, r4
 8001e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e08:	4621      	mov	r1, r4
 8001e0a:	028a      	lsls	r2, r1, #10
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e12:	2200      	movs	r2, #0
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	61fa      	str	r2, [r7, #28]
 8001e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e1c:	f7fe f9dc 	bl	80001d8 <__aeabi_uldivmod>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4613      	mov	r3, r2
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	3301      	adds	r3, #1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e42:	e002      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3750      	adds	r7, #80	; 0x50
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	00f42400 	.word	0x00f42400
 8001e60:	007a1200 	.word	0x007a1200

08001e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000040 	.word	0x20000040

08001e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e80:	f7ff fff0 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	0a9b      	lsrs	r3, r3, #10
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	08002fc4 	.word	0x08002fc4

08001ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ea8:	f7ff ffdc 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0b5b      	lsrs	r3, r3, #13
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	08002fc4 	.word	0x08002fc4

08001ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e03f      	b.n	8001f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fef2 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	; 0x24
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f829 	bl	8001f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f6c:	b0c0      	sub	sp, #256	; 0x100
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f84:	68d9      	ldr	r1, [r3, #12]
 8001f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	ea40 0301 	orr.w	r3, r0, r1
 8001f90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fc0:	f021 010c 	bic.w	r1, r1, #12
 8001fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe2:	6999      	ldr	r1, [r3, #24]
 8001fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	ea40 0301 	orr.w	r3, r0, r1
 8001fee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4b8f      	ldr	r3, [pc, #572]	; (8002234 <UART_SetConfig+0x2cc>)
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d005      	beq.n	8002008 <UART_SetConfig+0xa0>
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b8d      	ldr	r3, [pc, #564]	; (8002238 <UART_SetConfig+0x2d0>)
 8002004:	429a      	cmp	r2, r3
 8002006:	d104      	bne.n	8002012 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002008:	f7ff ff4c 	bl	8001ea4 <HAL_RCC_GetPCLK2Freq>
 800200c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002010:	e003      	b.n	800201a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002012:	f7ff ff33 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8002016:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800201a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002024:	f040 810c 	bne.w	8002240 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800202c:	2200      	movs	r2, #0
 800202e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002032:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002036:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800203a:	4622      	mov	r2, r4
 800203c:	462b      	mov	r3, r5
 800203e:	1891      	adds	r1, r2, r2
 8002040:	65b9      	str	r1, [r7, #88]	; 0x58
 8002042:	415b      	adcs	r3, r3
 8002044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002046:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800204a:	4621      	mov	r1, r4
 800204c:	eb12 0801 	adds.w	r8, r2, r1
 8002050:	4629      	mov	r1, r5
 8002052:	eb43 0901 	adc.w	r9, r3, r1
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800206a:	4690      	mov	r8, r2
 800206c:	4699      	mov	r9, r3
 800206e:	4623      	mov	r3, r4
 8002070:	eb18 0303 	adds.w	r3, r8, r3
 8002074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002078:	462b      	mov	r3, r5
 800207a:	eb49 0303 	adc.w	r3, r9, r3
 800207e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800208e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002092:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002096:	460b      	mov	r3, r1
 8002098:	18db      	adds	r3, r3, r3
 800209a:	653b      	str	r3, [r7, #80]	; 0x50
 800209c:	4613      	mov	r3, r2
 800209e:	eb42 0303 	adc.w	r3, r2, r3
 80020a2:	657b      	str	r3, [r7, #84]	; 0x54
 80020a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80020ac:	f7fe f894 	bl	80001d8 <__aeabi_uldivmod>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4b61      	ldr	r3, [pc, #388]	; (800223c <UART_SetConfig+0x2d4>)
 80020b6:	fba3 2302 	umull	r2, r3, r3, r2
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	011c      	lsls	r4, r3, #4
 80020be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020c2:	2200      	movs	r2, #0
 80020c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020d0:	4642      	mov	r2, r8
 80020d2:	464b      	mov	r3, r9
 80020d4:	1891      	adds	r1, r2, r2
 80020d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80020d8:	415b      	adcs	r3, r3
 80020da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020e0:	4641      	mov	r1, r8
 80020e2:	eb12 0a01 	adds.w	sl, r2, r1
 80020e6:	4649      	mov	r1, r9
 80020e8:	eb43 0b01 	adc.w	fp, r3, r1
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002100:	4692      	mov	sl, r2
 8002102:	469b      	mov	fp, r3
 8002104:	4643      	mov	r3, r8
 8002106:	eb1a 0303 	adds.w	r3, sl, r3
 800210a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800210e:	464b      	mov	r3, r9
 8002110:	eb4b 0303 	adc.w	r3, fp, r3
 8002114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002124:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002128:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800212c:	460b      	mov	r3, r1
 800212e:	18db      	adds	r3, r3, r3
 8002130:	643b      	str	r3, [r7, #64]	; 0x40
 8002132:	4613      	mov	r3, r2
 8002134:	eb42 0303 	adc.w	r3, r2, r3
 8002138:	647b      	str	r3, [r7, #68]	; 0x44
 800213a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800213e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002142:	f7fe f849 	bl	80001d8 <__aeabi_uldivmod>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4611      	mov	r1, r2
 800214c:	4b3b      	ldr	r3, [pc, #236]	; (800223c <UART_SetConfig+0x2d4>)
 800214e:	fba3 2301 	umull	r2, r3, r3, r1
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2264      	movs	r2, #100	; 0x64
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	1acb      	subs	r3, r1, r3
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <UART_SetConfig+0x2d4>)
 8002164:	fba3 2302 	umull	r2, r3, r3, r2
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002170:	441c      	add	r4, r3
 8002172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002176:	2200      	movs	r2, #0
 8002178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800217c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002180:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002184:	4642      	mov	r2, r8
 8002186:	464b      	mov	r3, r9
 8002188:	1891      	adds	r1, r2, r2
 800218a:	63b9      	str	r1, [r7, #56]	; 0x38
 800218c:	415b      	adcs	r3, r3
 800218e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002194:	4641      	mov	r1, r8
 8002196:	1851      	adds	r1, r2, r1
 8002198:	6339      	str	r1, [r7, #48]	; 0x30
 800219a:	4649      	mov	r1, r9
 800219c:	414b      	adcs	r3, r1
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80021ac:	4659      	mov	r1, fp
 80021ae:	00cb      	lsls	r3, r1, #3
 80021b0:	4651      	mov	r1, sl
 80021b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021b6:	4651      	mov	r1, sl
 80021b8:	00ca      	lsls	r2, r1, #3
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	4642      	mov	r2, r8
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021c8:	464b      	mov	r3, r9
 80021ca:	460a      	mov	r2, r1
 80021cc:	eb42 0303 	adc.w	r3, r2, r3
 80021d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021e8:	460b      	mov	r3, r1
 80021ea:	18db      	adds	r3, r3, r3
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ee:	4613      	mov	r3, r2
 80021f0:	eb42 0303 	adc.w	r3, r2, r3
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021fe:	f7fd ffeb 	bl	80001d8 <__aeabi_uldivmod>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <UART_SetConfig+0x2d4>)
 8002208:	fba3 1302 	umull	r1, r3, r3, r2
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	2164      	movs	r1, #100	; 0x64
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	3332      	adds	r3, #50	; 0x32
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <UART_SetConfig+0x2d4>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	f003 0207 	and.w	r2, r3, #7
 8002226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4422      	add	r2, r4
 800222e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002230:	e105      	b.n	800243e <UART_SetConfig+0x4d6>
 8002232:	bf00      	nop
 8002234:	40011000 	.word	0x40011000
 8002238:	40011400 	.word	0x40011400
 800223c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002244:	2200      	movs	r2, #0
 8002246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800224a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800224e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002252:	4642      	mov	r2, r8
 8002254:	464b      	mov	r3, r9
 8002256:	1891      	adds	r1, r2, r2
 8002258:	6239      	str	r1, [r7, #32]
 800225a:	415b      	adcs	r3, r3
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002262:	4641      	mov	r1, r8
 8002264:	1854      	adds	r4, r2, r1
 8002266:	4649      	mov	r1, r9
 8002268:	eb43 0501 	adc.w	r5, r3, r1
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	00eb      	lsls	r3, r5, #3
 8002276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227a:	00e2      	lsls	r2, r4, #3
 800227c:	4614      	mov	r4, r2
 800227e:	461d      	mov	r5, r3
 8002280:	4643      	mov	r3, r8
 8002282:	18e3      	adds	r3, r4, r3
 8002284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002288:	464b      	mov	r3, r9
 800228a:	eb45 0303 	adc.w	r3, r5, r3
 800228e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800229e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022ae:	4629      	mov	r1, r5
 80022b0:	008b      	lsls	r3, r1, #2
 80022b2:	4621      	mov	r1, r4
 80022b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022b8:	4621      	mov	r1, r4
 80022ba:	008a      	lsls	r2, r1, #2
 80022bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022c0:	f7fd ff8a 	bl	80001d8 <__aeabi_uldivmod>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4b60      	ldr	r3, [pc, #384]	; (800244c <UART_SetConfig+0x4e4>)
 80022ca:	fba3 2302 	umull	r2, r3, r3, r2
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	011c      	lsls	r4, r3, #4
 80022d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022d6:	2200      	movs	r2, #0
 80022d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022e4:	4642      	mov	r2, r8
 80022e6:	464b      	mov	r3, r9
 80022e8:	1891      	adds	r1, r2, r2
 80022ea:	61b9      	str	r1, [r7, #24]
 80022ec:	415b      	adcs	r3, r3
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022f4:	4641      	mov	r1, r8
 80022f6:	1851      	adds	r1, r2, r1
 80022f8:	6139      	str	r1, [r7, #16]
 80022fa:	4649      	mov	r1, r9
 80022fc:	414b      	adcs	r3, r1
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800230c:	4659      	mov	r1, fp
 800230e:	00cb      	lsls	r3, r1, #3
 8002310:	4651      	mov	r1, sl
 8002312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002316:	4651      	mov	r1, sl
 8002318:	00ca      	lsls	r2, r1, #3
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	4603      	mov	r3, r0
 8002320:	4642      	mov	r2, r8
 8002322:	189b      	adds	r3, r3, r2
 8002324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002328:	464b      	mov	r3, r9
 800232a:	460a      	mov	r2, r1
 800232c:	eb42 0303 	adc.w	r3, r2, r3
 8002330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	67bb      	str	r3, [r7, #120]	; 0x78
 800233e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800234c:	4649      	mov	r1, r9
 800234e:	008b      	lsls	r3, r1, #2
 8002350:	4641      	mov	r1, r8
 8002352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002356:	4641      	mov	r1, r8
 8002358:	008a      	lsls	r2, r1, #2
 800235a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800235e:	f7fd ff3b 	bl	80001d8 <__aeabi_uldivmod>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4b39      	ldr	r3, [pc, #228]	; (800244c <UART_SetConfig+0x4e4>)
 8002368:	fba3 1302 	umull	r1, r3, r3, r2
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	2164      	movs	r1, #100	; 0x64
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	3332      	adds	r3, #50	; 0x32
 800237a:	4a34      	ldr	r2, [pc, #208]	; (800244c <UART_SetConfig+0x4e4>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002386:	441c      	add	r4, r3
 8002388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800238c:	2200      	movs	r2, #0
 800238e:	673b      	str	r3, [r7, #112]	; 0x70
 8002390:	677a      	str	r2, [r7, #116]	; 0x74
 8002392:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002396:	4642      	mov	r2, r8
 8002398:	464b      	mov	r3, r9
 800239a:	1891      	adds	r1, r2, r2
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	415b      	adcs	r3, r3
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023a6:	4641      	mov	r1, r8
 80023a8:	1851      	adds	r1, r2, r1
 80023aa:	6039      	str	r1, [r7, #0]
 80023ac:	4649      	mov	r1, r9
 80023ae:	414b      	adcs	r3, r1
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023be:	4659      	mov	r1, fp
 80023c0:	00cb      	lsls	r3, r1, #3
 80023c2:	4651      	mov	r1, sl
 80023c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023c8:	4651      	mov	r1, sl
 80023ca:	00ca      	lsls	r2, r1, #3
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	4603      	mov	r3, r0
 80023d2:	4642      	mov	r2, r8
 80023d4:	189b      	adds	r3, r3, r2
 80023d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80023d8:	464b      	mov	r3, r9
 80023da:	460a      	mov	r2, r1
 80023dc:	eb42 0303 	adc.w	r3, r2, r3
 80023e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	663b      	str	r3, [r7, #96]	; 0x60
 80023ec:	667a      	str	r2, [r7, #100]	; 0x64
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023fa:	4649      	mov	r1, r9
 80023fc:	008b      	lsls	r3, r1, #2
 80023fe:	4641      	mov	r1, r8
 8002400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002404:	4641      	mov	r1, r8
 8002406:	008a      	lsls	r2, r1, #2
 8002408:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800240c:	f7fd fee4 	bl	80001d8 <__aeabi_uldivmod>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <UART_SetConfig+0x4e4>)
 8002416:	fba3 1302 	umull	r1, r3, r3, r2
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2164      	movs	r1, #100	; 0x64
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	3332      	adds	r3, #50	; 0x32
 8002428:	4a08      	ldr	r2, [pc, #32]	; (800244c <UART_SetConfig+0x4e4>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	f003 020f 	and.w	r2, r3, #15
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4422      	add	r2, r4
 800243c:	609a      	str	r2, [r3, #8]
}
 800243e:	bf00      	nop
 8002440:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002444:	46bd      	mov	sp, r7
 8002446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800244a:	bf00      	nop
 800244c:	51eb851f 	.word	0x51eb851f

08002450 <__errno>:
 8002450:	4b01      	ldr	r3, [pc, #4]	; (8002458 <__errno+0x8>)
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	2000004c 	.word	0x2000004c

0800245c <__libc_init_array>:
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	4d0d      	ldr	r5, [pc, #52]	; (8002494 <__libc_init_array+0x38>)
 8002460:	4c0d      	ldr	r4, [pc, #52]	; (8002498 <__libc_init_array+0x3c>)
 8002462:	1b64      	subs	r4, r4, r5
 8002464:	10a4      	asrs	r4, r4, #2
 8002466:	2600      	movs	r6, #0
 8002468:	42a6      	cmp	r6, r4
 800246a:	d109      	bne.n	8002480 <__libc_init_array+0x24>
 800246c:	4d0b      	ldr	r5, [pc, #44]	; (800249c <__libc_init_array+0x40>)
 800246e:	4c0c      	ldr	r4, [pc, #48]	; (80024a0 <__libc_init_array+0x44>)
 8002470:	f000 fd1e 	bl	8002eb0 <_init>
 8002474:	1b64      	subs	r4, r4, r5
 8002476:	10a4      	asrs	r4, r4, #2
 8002478:	2600      	movs	r6, #0
 800247a:	42a6      	cmp	r6, r4
 800247c:	d105      	bne.n	800248a <__libc_init_array+0x2e>
 800247e:	bd70      	pop	{r4, r5, r6, pc}
 8002480:	f855 3b04 	ldr.w	r3, [r5], #4
 8002484:	4798      	blx	r3
 8002486:	3601      	adds	r6, #1
 8002488:	e7ee      	b.n	8002468 <__libc_init_array+0xc>
 800248a:	f855 3b04 	ldr.w	r3, [r5], #4
 800248e:	4798      	blx	r3
 8002490:	3601      	adds	r6, #1
 8002492:	e7f2      	b.n	800247a <__libc_init_array+0x1e>
 8002494:	08003038 	.word	0x08003038
 8002498:	08003038 	.word	0x08003038
 800249c:	08003038 	.word	0x08003038
 80024a0:	0800303c 	.word	0x0800303c

080024a4 <memset>:
 80024a4:	4402      	add	r2, r0
 80024a6:	4603      	mov	r3, r0
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d100      	bne.n	80024ae <memset+0xa>
 80024ac:	4770      	bx	lr
 80024ae:	f803 1b01 	strb.w	r1, [r3], #1
 80024b2:	e7f9      	b.n	80024a8 <memset+0x4>

080024b4 <_puts_r>:
 80024b4:	b570      	push	{r4, r5, r6, lr}
 80024b6:	460e      	mov	r6, r1
 80024b8:	4605      	mov	r5, r0
 80024ba:	b118      	cbz	r0, 80024c4 <_puts_r+0x10>
 80024bc:	6983      	ldr	r3, [r0, #24]
 80024be:	b90b      	cbnz	r3, 80024c4 <_puts_r+0x10>
 80024c0:	f000 fa48 	bl	8002954 <__sinit>
 80024c4:	69ab      	ldr	r3, [r5, #24]
 80024c6:	68ac      	ldr	r4, [r5, #8]
 80024c8:	b913      	cbnz	r3, 80024d0 <_puts_r+0x1c>
 80024ca:	4628      	mov	r0, r5
 80024cc:	f000 fa42 	bl	8002954 <__sinit>
 80024d0:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <_puts_r+0xd0>)
 80024d2:	429c      	cmp	r4, r3
 80024d4:	d120      	bne.n	8002518 <_puts_r+0x64>
 80024d6:	686c      	ldr	r4, [r5, #4]
 80024d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024da:	07db      	lsls	r3, r3, #31
 80024dc:	d405      	bmi.n	80024ea <_puts_r+0x36>
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	0598      	lsls	r0, r3, #22
 80024e2:	d402      	bmi.n	80024ea <_puts_r+0x36>
 80024e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024e6:	f000 fad3 	bl	8002a90 <__retarget_lock_acquire_recursive>
 80024ea:	89a3      	ldrh	r3, [r4, #12]
 80024ec:	0719      	lsls	r1, r3, #28
 80024ee:	d51d      	bpl.n	800252c <_puts_r+0x78>
 80024f0:	6923      	ldr	r3, [r4, #16]
 80024f2:	b1db      	cbz	r3, 800252c <_puts_r+0x78>
 80024f4:	3e01      	subs	r6, #1
 80024f6:	68a3      	ldr	r3, [r4, #8]
 80024f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80024fc:	3b01      	subs	r3, #1
 80024fe:	60a3      	str	r3, [r4, #8]
 8002500:	bb39      	cbnz	r1, 8002552 <_puts_r+0x9e>
 8002502:	2b00      	cmp	r3, #0
 8002504:	da38      	bge.n	8002578 <_puts_r+0xc4>
 8002506:	4622      	mov	r2, r4
 8002508:	210a      	movs	r1, #10
 800250a:	4628      	mov	r0, r5
 800250c:	f000 f848 	bl	80025a0 <__swbuf_r>
 8002510:	3001      	adds	r0, #1
 8002512:	d011      	beq.n	8002538 <_puts_r+0x84>
 8002514:	250a      	movs	r5, #10
 8002516:	e011      	b.n	800253c <_puts_r+0x88>
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <_puts_r+0xd4>)
 800251a:	429c      	cmp	r4, r3
 800251c:	d101      	bne.n	8002522 <_puts_r+0x6e>
 800251e:	68ac      	ldr	r4, [r5, #8]
 8002520:	e7da      	b.n	80024d8 <_puts_r+0x24>
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <_puts_r+0xd8>)
 8002524:	429c      	cmp	r4, r3
 8002526:	bf08      	it	eq
 8002528:	68ec      	ldreq	r4, [r5, #12]
 800252a:	e7d5      	b.n	80024d8 <_puts_r+0x24>
 800252c:	4621      	mov	r1, r4
 800252e:	4628      	mov	r0, r5
 8002530:	f000 f888 	bl	8002644 <__swsetup_r>
 8002534:	2800      	cmp	r0, #0
 8002536:	d0dd      	beq.n	80024f4 <_puts_r+0x40>
 8002538:	f04f 35ff 	mov.w	r5, #4294967295
 800253c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800253e:	07da      	lsls	r2, r3, #31
 8002540:	d405      	bmi.n	800254e <_puts_r+0x9a>
 8002542:	89a3      	ldrh	r3, [r4, #12]
 8002544:	059b      	lsls	r3, r3, #22
 8002546:	d402      	bmi.n	800254e <_puts_r+0x9a>
 8002548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800254a:	f000 faa2 	bl	8002a92 <__retarget_lock_release_recursive>
 800254e:	4628      	mov	r0, r5
 8002550:	bd70      	pop	{r4, r5, r6, pc}
 8002552:	2b00      	cmp	r3, #0
 8002554:	da04      	bge.n	8002560 <_puts_r+0xac>
 8002556:	69a2      	ldr	r2, [r4, #24]
 8002558:	429a      	cmp	r2, r3
 800255a:	dc06      	bgt.n	800256a <_puts_r+0xb6>
 800255c:	290a      	cmp	r1, #10
 800255e:	d004      	beq.n	800256a <_puts_r+0xb6>
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	6022      	str	r2, [r4, #0]
 8002566:	7019      	strb	r1, [r3, #0]
 8002568:	e7c5      	b.n	80024f6 <_puts_r+0x42>
 800256a:	4622      	mov	r2, r4
 800256c:	4628      	mov	r0, r5
 800256e:	f000 f817 	bl	80025a0 <__swbuf_r>
 8002572:	3001      	adds	r0, #1
 8002574:	d1bf      	bne.n	80024f6 <_puts_r+0x42>
 8002576:	e7df      	b.n	8002538 <_puts_r+0x84>
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	250a      	movs	r5, #10
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	6022      	str	r2, [r4, #0]
 8002580:	701d      	strb	r5, [r3, #0]
 8002582:	e7db      	b.n	800253c <_puts_r+0x88>
 8002584:	08002ff0 	.word	0x08002ff0
 8002588:	08003010 	.word	0x08003010
 800258c:	08002fd0 	.word	0x08002fd0

08002590 <puts>:
 8002590:	4b02      	ldr	r3, [pc, #8]	; (800259c <puts+0xc>)
 8002592:	4601      	mov	r1, r0
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	f7ff bf8d 	b.w	80024b4 <_puts_r>
 800259a:	bf00      	nop
 800259c:	2000004c 	.word	0x2000004c

080025a0 <__swbuf_r>:
 80025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a2:	460e      	mov	r6, r1
 80025a4:	4614      	mov	r4, r2
 80025a6:	4605      	mov	r5, r0
 80025a8:	b118      	cbz	r0, 80025b2 <__swbuf_r+0x12>
 80025aa:	6983      	ldr	r3, [r0, #24]
 80025ac:	b90b      	cbnz	r3, 80025b2 <__swbuf_r+0x12>
 80025ae:	f000 f9d1 	bl	8002954 <__sinit>
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <__swbuf_r+0x98>)
 80025b4:	429c      	cmp	r4, r3
 80025b6:	d12b      	bne.n	8002610 <__swbuf_r+0x70>
 80025b8:	686c      	ldr	r4, [r5, #4]
 80025ba:	69a3      	ldr	r3, [r4, #24]
 80025bc:	60a3      	str	r3, [r4, #8]
 80025be:	89a3      	ldrh	r3, [r4, #12]
 80025c0:	071a      	lsls	r2, r3, #28
 80025c2:	d52f      	bpl.n	8002624 <__swbuf_r+0x84>
 80025c4:	6923      	ldr	r3, [r4, #16]
 80025c6:	b36b      	cbz	r3, 8002624 <__swbuf_r+0x84>
 80025c8:	6923      	ldr	r3, [r4, #16]
 80025ca:	6820      	ldr	r0, [r4, #0]
 80025cc:	1ac0      	subs	r0, r0, r3
 80025ce:	6963      	ldr	r3, [r4, #20]
 80025d0:	b2f6      	uxtb	r6, r6
 80025d2:	4283      	cmp	r3, r0
 80025d4:	4637      	mov	r7, r6
 80025d6:	dc04      	bgt.n	80025e2 <__swbuf_r+0x42>
 80025d8:	4621      	mov	r1, r4
 80025da:	4628      	mov	r0, r5
 80025dc:	f000 f926 	bl	800282c <_fflush_r>
 80025e0:	bb30      	cbnz	r0, 8002630 <__swbuf_r+0x90>
 80025e2:	68a3      	ldr	r3, [r4, #8]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	60a3      	str	r3, [r4, #8]
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	6022      	str	r2, [r4, #0]
 80025ee:	701e      	strb	r6, [r3, #0]
 80025f0:	6963      	ldr	r3, [r4, #20]
 80025f2:	3001      	adds	r0, #1
 80025f4:	4283      	cmp	r3, r0
 80025f6:	d004      	beq.n	8002602 <__swbuf_r+0x62>
 80025f8:	89a3      	ldrh	r3, [r4, #12]
 80025fa:	07db      	lsls	r3, r3, #31
 80025fc:	d506      	bpl.n	800260c <__swbuf_r+0x6c>
 80025fe:	2e0a      	cmp	r6, #10
 8002600:	d104      	bne.n	800260c <__swbuf_r+0x6c>
 8002602:	4621      	mov	r1, r4
 8002604:	4628      	mov	r0, r5
 8002606:	f000 f911 	bl	800282c <_fflush_r>
 800260a:	b988      	cbnz	r0, 8002630 <__swbuf_r+0x90>
 800260c:	4638      	mov	r0, r7
 800260e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <__swbuf_r+0x9c>)
 8002612:	429c      	cmp	r4, r3
 8002614:	d101      	bne.n	800261a <__swbuf_r+0x7a>
 8002616:	68ac      	ldr	r4, [r5, #8]
 8002618:	e7cf      	b.n	80025ba <__swbuf_r+0x1a>
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <__swbuf_r+0xa0>)
 800261c:	429c      	cmp	r4, r3
 800261e:	bf08      	it	eq
 8002620:	68ec      	ldreq	r4, [r5, #12]
 8002622:	e7ca      	b.n	80025ba <__swbuf_r+0x1a>
 8002624:	4621      	mov	r1, r4
 8002626:	4628      	mov	r0, r5
 8002628:	f000 f80c 	bl	8002644 <__swsetup_r>
 800262c:	2800      	cmp	r0, #0
 800262e:	d0cb      	beq.n	80025c8 <__swbuf_r+0x28>
 8002630:	f04f 37ff 	mov.w	r7, #4294967295
 8002634:	e7ea      	b.n	800260c <__swbuf_r+0x6c>
 8002636:	bf00      	nop
 8002638:	08002ff0 	.word	0x08002ff0
 800263c:	08003010 	.word	0x08003010
 8002640:	08002fd0 	.word	0x08002fd0

08002644 <__swsetup_r>:
 8002644:	4b32      	ldr	r3, [pc, #200]	; (8002710 <__swsetup_r+0xcc>)
 8002646:	b570      	push	{r4, r5, r6, lr}
 8002648:	681d      	ldr	r5, [r3, #0]
 800264a:	4606      	mov	r6, r0
 800264c:	460c      	mov	r4, r1
 800264e:	b125      	cbz	r5, 800265a <__swsetup_r+0x16>
 8002650:	69ab      	ldr	r3, [r5, #24]
 8002652:	b913      	cbnz	r3, 800265a <__swsetup_r+0x16>
 8002654:	4628      	mov	r0, r5
 8002656:	f000 f97d 	bl	8002954 <__sinit>
 800265a:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <__swsetup_r+0xd0>)
 800265c:	429c      	cmp	r4, r3
 800265e:	d10f      	bne.n	8002680 <__swsetup_r+0x3c>
 8002660:	686c      	ldr	r4, [r5, #4]
 8002662:	89a3      	ldrh	r3, [r4, #12]
 8002664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002668:	0719      	lsls	r1, r3, #28
 800266a:	d42c      	bmi.n	80026c6 <__swsetup_r+0x82>
 800266c:	06dd      	lsls	r5, r3, #27
 800266e:	d411      	bmi.n	8002694 <__swsetup_r+0x50>
 8002670:	2309      	movs	r3, #9
 8002672:	6033      	str	r3, [r6, #0]
 8002674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002678:	81a3      	strh	r3, [r4, #12]
 800267a:	f04f 30ff 	mov.w	r0, #4294967295
 800267e:	e03e      	b.n	80026fe <__swsetup_r+0xba>
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <__swsetup_r+0xd4>)
 8002682:	429c      	cmp	r4, r3
 8002684:	d101      	bne.n	800268a <__swsetup_r+0x46>
 8002686:	68ac      	ldr	r4, [r5, #8]
 8002688:	e7eb      	b.n	8002662 <__swsetup_r+0x1e>
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <__swsetup_r+0xd8>)
 800268c:	429c      	cmp	r4, r3
 800268e:	bf08      	it	eq
 8002690:	68ec      	ldreq	r4, [r5, #12]
 8002692:	e7e6      	b.n	8002662 <__swsetup_r+0x1e>
 8002694:	0758      	lsls	r0, r3, #29
 8002696:	d512      	bpl.n	80026be <__swsetup_r+0x7a>
 8002698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800269a:	b141      	cbz	r1, 80026ae <__swsetup_r+0x6a>
 800269c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026a0:	4299      	cmp	r1, r3
 80026a2:	d002      	beq.n	80026aa <__swsetup_r+0x66>
 80026a4:	4630      	mov	r0, r6
 80026a6:	f000 fa5b 	bl	8002b60 <_free_r>
 80026aa:	2300      	movs	r3, #0
 80026ac:	6363      	str	r3, [r4, #52]	; 0x34
 80026ae:	89a3      	ldrh	r3, [r4, #12]
 80026b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80026b4:	81a3      	strh	r3, [r4, #12]
 80026b6:	2300      	movs	r3, #0
 80026b8:	6063      	str	r3, [r4, #4]
 80026ba:	6923      	ldr	r3, [r4, #16]
 80026bc:	6023      	str	r3, [r4, #0]
 80026be:	89a3      	ldrh	r3, [r4, #12]
 80026c0:	f043 0308 	orr.w	r3, r3, #8
 80026c4:	81a3      	strh	r3, [r4, #12]
 80026c6:	6923      	ldr	r3, [r4, #16]
 80026c8:	b94b      	cbnz	r3, 80026de <__swsetup_r+0x9a>
 80026ca:	89a3      	ldrh	r3, [r4, #12]
 80026cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80026d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d4:	d003      	beq.n	80026de <__swsetup_r+0x9a>
 80026d6:	4621      	mov	r1, r4
 80026d8:	4630      	mov	r0, r6
 80026da:	f000 fa01 	bl	8002ae0 <__smakebuf_r>
 80026de:	89a0      	ldrh	r0, [r4, #12]
 80026e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026e4:	f010 0301 	ands.w	r3, r0, #1
 80026e8:	d00a      	beq.n	8002700 <__swsetup_r+0xbc>
 80026ea:	2300      	movs	r3, #0
 80026ec:	60a3      	str	r3, [r4, #8]
 80026ee:	6963      	ldr	r3, [r4, #20]
 80026f0:	425b      	negs	r3, r3
 80026f2:	61a3      	str	r3, [r4, #24]
 80026f4:	6923      	ldr	r3, [r4, #16]
 80026f6:	b943      	cbnz	r3, 800270a <__swsetup_r+0xc6>
 80026f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80026fc:	d1ba      	bne.n	8002674 <__swsetup_r+0x30>
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	0781      	lsls	r1, r0, #30
 8002702:	bf58      	it	pl
 8002704:	6963      	ldrpl	r3, [r4, #20]
 8002706:	60a3      	str	r3, [r4, #8]
 8002708:	e7f4      	b.n	80026f4 <__swsetup_r+0xb0>
 800270a:	2000      	movs	r0, #0
 800270c:	e7f7      	b.n	80026fe <__swsetup_r+0xba>
 800270e:	bf00      	nop
 8002710:	2000004c 	.word	0x2000004c
 8002714:	08002ff0 	.word	0x08002ff0
 8002718:	08003010 	.word	0x08003010
 800271c:	08002fd0 	.word	0x08002fd0

08002720 <__sflush_r>:
 8002720:	898a      	ldrh	r2, [r1, #12]
 8002722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002726:	4605      	mov	r5, r0
 8002728:	0710      	lsls	r0, r2, #28
 800272a:	460c      	mov	r4, r1
 800272c:	d458      	bmi.n	80027e0 <__sflush_r+0xc0>
 800272e:	684b      	ldr	r3, [r1, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	dc05      	bgt.n	8002740 <__sflush_r+0x20>
 8002734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	dc02      	bgt.n	8002740 <__sflush_r+0x20>
 800273a:	2000      	movs	r0, #0
 800273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002742:	2e00      	cmp	r6, #0
 8002744:	d0f9      	beq.n	800273a <__sflush_r+0x1a>
 8002746:	2300      	movs	r3, #0
 8002748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800274c:	682f      	ldr	r7, [r5, #0]
 800274e:	602b      	str	r3, [r5, #0]
 8002750:	d032      	beq.n	80027b8 <__sflush_r+0x98>
 8002752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002754:	89a3      	ldrh	r3, [r4, #12]
 8002756:	075a      	lsls	r2, r3, #29
 8002758:	d505      	bpl.n	8002766 <__sflush_r+0x46>
 800275a:	6863      	ldr	r3, [r4, #4]
 800275c:	1ac0      	subs	r0, r0, r3
 800275e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002760:	b10b      	cbz	r3, 8002766 <__sflush_r+0x46>
 8002762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002764:	1ac0      	subs	r0, r0, r3
 8002766:	2300      	movs	r3, #0
 8002768:	4602      	mov	r2, r0
 800276a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800276c:	6a21      	ldr	r1, [r4, #32]
 800276e:	4628      	mov	r0, r5
 8002770:	47b0      	blx	r6
 8002772:	1c43      	adds	r3, r0, #1
 8002774:	89a3      	ldrh	r3, [r4, #12]
 8002776:	d106      	bne.n	8002786 <__sflush_r+0x66>
 8002778:	6829      	ldr	r1, [r5, #0]
 800277a:	291d      	cmp	r1, #29
 800277c:	d82c      	bhi.n	80027d8 <__sflush_r+0xb8>
 800277e:	4a2a      	ldr	r2, [pc, #168]	; (8002828 <__sflush_r+0x108>)
 8002780:	40ca      	lsrs	r2, r1
 8002782:	07d6      	lsls	r6, r2, #31
 8002784:	d528      	bpl.n	80027d8 <__sflush_r+0xb8>
 8002786:	2200      	movs	r2, #0
 8002788:	6062      	str	r2, [r4, #4]
 800278a:	04d9      	lsls	r1, r3, #19
 800278c:	6922      	ldr	r2, [r4, #16]
 800278e:	6022      	str	r2, [r4, #0]
 8002790:	d504      	bpl.n	800279c <__sflush_r+0x7c>
 8002792:	1c42      	adds	r2, r0, #1
 8002794:	d101      	bne.n	800279a <__sflush_r+0x7a>
 8002796:	682b      	ldr	r3, [r5, #0]
 8002798:	b903      	cbnz	r3, 800279c <__sflush_r+0x7c>
 800279a:	6560      	str	r0, [r4, #84]	; 0x54
 800279c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800279e:	602f      	str	r7, [r5, #0]
 80027a0:	2900      	cmp	r1, #0
 80027a2:	d0ca      	beq.n	800273a <__sflush_r+0x1a>
 80027a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027a8:	4299      	cmp	r1, r3
 80027aa:	d002      	beq.n	80027b2 <__sflush_r+0x92>
 80027ac:	4628      	mov	r0, r5
 80027ae:	f000 f9d7 	bl	8002b60 <_free_r>
 80027b2:	2000      	movs	r0, #0
 80027b4:	6360      	str	r0, [r4, #52]	; 0x34
 80027b6:	e7c1      	b.n	800273c <__sflush_r+0x1c>
 80027b8:	6a21      	ldr	r1, [r4, #32]
 80027ba:	2301      	movs	r3, #1
 80027bc:	4628      	mov	r0, r5
 80027be:	47b0      	blx	r6
 80027c0:	1c41      	adds	r1, r0, #1
 80027c2:	d1c7      	bne.n	8002754 <__sflush_r+0x34>
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0c4      	beq.n	8002754 <__sflush_r+0x34>
 80027ca:	2b1d      	cmp	r3, #29
 80027cc:	d001      	beq.n	80027d2 <__sflush_r+0xb2>
 80027ce:	2b16      	cmp	r3, #22
 80027d0:	d101      	bne.n	80027d6 <__sflush_r+0xb6>
 80027d2:	602f      	str	r7, [r5, #0]
 80027d4:	e7b1      	b.n	800273a <__sflush_r+0x1a>
 80027d6:	89a3      	ldrh	r3, [r4, #12]
 80027d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027dc:	81a3      	strh	r3, [r4, #12]
 80027de:	e7ad      	b.n	800273c <__sflush_r+0x1c>
 80027e0:	690f      	ldr	r7, [r1, #16]
 80027e2:	2f00      	cmp	r7, #0
 80027e4:	d0a9      	beq.n	800273a <__sflush_r+0x1a>
 80027e6:	0793      	lsls	r3, r2, #30
 80027e8:	680e      	ldr	r6, [r1, #0]
 80027ea:	bf08      	it	eq
 80027ec:	694b      	ldreq	r3, [r1, #20]
 80027ee:	600f      	str	r7, [r1, #0]
 80027f0:	bf18      	it	ne
 80027f2:	2300      	movne	r3, #0
 80027f4:	eba6 0807 	sub.w	r8, r6, r7
 80027f8:	608b      	str	r3, [r1, #8]
 80027fa:	f1b8 0f00 	cmp.w	r8, #0
 80027fe:	dd9c      	ble.n	800273a <__sflush_r+0x1a>
 8002800:	6a21      	ldr	r1, [r4, #32]
 8002802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002804:	4643      	mov	r3, r8
 8002806:	463a      	mov	r2, r7
 8002808:	4628      	mov	r0, r5
 800280a:	47b0      	blx	r6
 800280c:	2800      	cmp	r0, #0
 800280e:	dc06      	bgt.n	800281e <__sflush_r+0xfe>
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002816:	81a3      	strh	r3, [r4, #12]
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	e78e      	b.n	800273c <__sflush_r+0x1c>
 800281e:	4407      	add	r7, r0
 8002820:	eba8 0800 	sub.w	r8, r8, r0
 8002824:	e7e9      	b.n	80027fa <__sflush_r+0xda>
 8002826:	bf00      	nop
 8002828:	20400001 	.word	0x20400001

0800282c <_fflush_r>:
 800282c:	b538      	push	{r3, r4, r5, lr}
 800282e:	690b      	ldr	r3, [r1, #16]
 8002830:	4605      	mov	r5, r0
 8002832:	460c      	mov	r4, r1
 8002834:	b913      	cbnz	r3, 800283c <_fflush_r+0x10>
 8002836:	2500      	movs	r5, #0
 8002838:	4628      	mov	r0, r5
 800283a:	bd38      	pop	{r3, r4, r5, pc}
 800283c:	b118      	cbz	r0, 8002846 <_fflush_r+0x1a>
 800283e:	6983      	ldr	r3, [r0, #24]
 8002840:	b90b      	cbnz	r3, 8002846 <_fflush_r+0x1a>
 8002842:	f000 f887 	bl	8002954 <__sinit>
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <_fflush_r+0x6c>)
 8002848:	429c      	cmp	r4, r3
 800284a:	d11b      	bne.n	8002884 <_fflush_r+0x58>
 800284c:	686c      	ldr	r4, [r5, #4]
 800284e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0ef      	beq.n	8002836 <_fflush_r+0xa>
 8002856:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002858:	07d0      	lsls	r0, r2, #31
 800285a:	d404      	bmi.n	8002866 <_fflush_r+0x3a>
 800285c:	0599      	lsls	r1, r3, #22
 800285e:	d402      	bmi.n	8002866 <_fflush_r+0x3a>
 8002860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002862:	f000 f915 	bl	8002a90 <__retarget_lock_acquire_recursive>
 8002866:	4628      	mov	r0, r5
 8002868:	4621      	mov	r1, r4
 800286a:	f7ff ff59 	bl	8002720 <__sflush_r>
 800286e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002870:	07da      	lsls	r2, r3, #31
 8002872:	4605      	mov	r5, r0
 8002874:	d4e0      	bmi.n	8002838 <_fflush_r+0xc>
 8002876:	89a3      	ldrh	r3, [r4, #12]
 8002878:	059b      	lsls	r3, r3, #22
 800287a:	d4dd      	bmi.n	8002838 <_fflush_r+0xc>
 800287c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800287e:	f000 f908 	bl	8002a92 <__retarget_lock_release_recursive>
 8002882:	e7d9      	b.n	8002838 <_fflush_r+0xc>
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <_fflush_r+0x70>)
 8002886:	429c      	cmp	r4, r3
 8002888:	d101      	bne.n	800288e <_fflush_r+0x62>
 800288a:	68ac      	ldr	r4, [r5, #8]
 800288c:	e7df      	b.n	800284e <_fflush_r+0x22>
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <_fflush_r+0x74>)
 8002890:	429c      	cmp	r4, r3
 8002892:	bf08      	it	eq
 8002894:	68ec      	ldreq	r4, [r5, #12]
 8002896:	e7da      	b.n	800284e <_fflush_r+0x22>
 8002898:	08002ff0 	.word	0x08002ff0
 800289c:	08003010 	.word	0x08003010
 80028a0:	08002fd0 	.word	0x08002fd0

080028a4 <std>:
 80028a4:	2300      	movs	r3, #0
 80028a6:	b510      	push	{r4, lr}
 80028a8:	4604      	mov	r4, r0
 80028aa:	e9c0 3300 	strd	r3, r3, [r0]
 80028ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028b2:	6083      	str	r3, [r0, #8]
 80028b4:	8181      	strh	r1, [r0, #12]
 80028b6:	6643      	str	r3, [r0, #100]	; 0x64
 80028b8:	81c2      	strh	r2, [r0, #14]
 80028ba:	6183      	str	r3, [r0, #24]
 80028bc:	4619      	mov	r1, r3
 80028be:	2208      	movs	r2, #8
 80028c0:	305c      	adds	r0, #92	; 0x5c
 80028c2:	f7ff fdef 	bl	80024a4 <memset>
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <std+0x38>)
 80028c8:	6263      	str	r3, [r4, #36]	; 0x24
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <std+0x3c>)
 80028cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <std+0x40>)
 80028d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <std+0x44>)
 80028d4:	6224      	str	r4, [r4, #32]
 80028d6:	6323      	str	r3, [r4, #48]	; 0x30
 80028d8:	bd10      	pop	{r4, pc}
 80028da:	bf00      	nop
 80028dc:	08002d41 	.word	0x08002d41
 80028e0:	08002d63 	.word	0x08002d63
 80028e4:	08002d9b 	.word	0x08002d9b
 80028e8:	08002dbf 	.word	0x08002dbf

080028ec <_cleanup_r>:
 80028ec:	4901      	ldr	r1, [pc, #4]	; (80028f4 <_cleanup_r+0x8>)
 80028ee:	f000 b8af 	b.w	8002a50 <_fwalk_reent>
 80028f2:	bf00      	nop
 80028f4:	0800282d 	.word	0x0800282d

080028f8 <__sfmoreglue>:
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	2268      	movs	r2, #104	; 0x68
 80028fc:	1e4d      	subs	r5, r1, #1
 80028fe:	4355      	muls	r5, r2
 8002900:	460e      	mov	r6, r1
 8002902:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002906:	f000 f997 	bl	8002c38 <_malloc_r>
 800290a:	4604      	mov	r4, r0
 800290c:	b140      	cbz	r0, 8002920 <__sfmoreglue+0x28>
 800290e:	2100      	movs	r1, #0
 8002910:	e9c0 1600 	strd	r1, r6, [r0]
 8002914:	300c      	adds	r0, #12
 8002916:	60a0      	str	r0, [r4, #8]
 8002918:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800291c:	f7ff fdc2 	bl	80024a4 <memset>
 8002920:	4620      	mov	r0, r4
 8002922:	bd70      	pop	{r4, r5, r6, pc}

08002924 <__sfp_lock_acquire>:
 8002924:	4801      	ldr	r0, [pc, #4]	; (800292c <__sfp_lock_acquire+0x8>)
 8002926:	f000 b8b3 	b.w	8002a90 <__retarget_lock_acquire_recursive>
 800292a:	bf00      	nop
 800292c:	20000141 	.word	0x20000141

08002930 <__sfp_lock_release>:
 8002930:	4801      	ldr	r0, [pc, #4]	; (8002938 <__sfp_lock_release+0x8>)
 8002932:	f000 b8ae 	b.w	8002a92 <__retarget_lock_release_recursive>
 8002936:	bf00      	nop
 8002938:	20000141 	.word	0x20000141

0800293c <__sinit_lock_acquire>:
 800293c:	4801      	ldr	r0, [pc, #4]	; (8002944 <__sinit_lock_acquire+0x8>)
 800293e:	f000 b8a7 	b.w	8002a90 <__retarget_lock_acquire_recursive>
 8002942:	bf00      	nop
 8002944:	20000142 	.word	0x20000142

08002948 <__sinit_lock_release>:
 8002948:	4801      	ldr	r0, [pc, #4]	; (8002950 <__sinit_lock_release+0x8>)
 800294a:	f000 b8a2 	b.w	8002a92 <__retarget_lock_release_recursive>
 800294e:	bf00      	nop
 8002950:	20000142 	.word	0x20000142

08002954 <__sinit>:
 8002954:	b510      	push	{r4, lr}
 8002956:	4604      	mov	r4, r0
 8002958:	f7ff fff0 	bl	800293c <__sinit_lock_acquire>
 800295c:	69a3      	ldr	r3, [r4, #24]
 800295e:	b11b      	cbz	r3, 8002968 <__sinit+0x14>
 8002960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002964:	f7ff bff0 	b.w	8002948 <__sinit_lock_release>
 8002968:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800296c:	6523      	str	r3, [r4, #80]	; 0x50
 800296e:	4b13      	ldr	r3, [pc, #76]	; (80029bc <__sinit+0x68>)
 8002970:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <__sinit+0x6c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	62a2      	str	r2, [r4, #40]	; 0x28
 8002976:	42a3      	cmp	r3, r4
 8002978:	bf04      	itt	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	61a3      	streq	r3, [r4, #24]
 800297e:	4620      	mov	r0, r4
 8002980:	f000 f820 	bl	80029c4 <__sfp>
 8002984:	6060      	str	r0, [r4, #4]
 8002986:	4620      	mov	r0, r4
 8002988:	f000 f81c 	bl	80029c4 <__sfp>
 800298c:	60a0      	str	r0, [r4, #8]
 800298e:	4620      	mov	r0, r4
 8002990:	f000 f818 	bl	80029c4 <__sfp>
 8002994:	2200      	movs	r2, #0
 8002996:	60e0      	str	r0, [r4, #12]
 8002998:	2104      	movs	r1, #4
 800299a:	6860      	ldr	r0, [r4, #4]
 800299c:	f7ff ff82 	bl	80028a4 <std>
 80029a0:	68a0      	ldr	r0, [r4, #8]
 80029a2:	2201      	movs	r2, #1
 80029a4:	2109      	movs	r1, #9
 80029a6:	f7ff ff7d 	bl	80028a4 <std>
 80029aa:	68e0      	ldr	r0, [r4, #12]
 80029ac:	2202      	movs	r2, #2
 80029ae:	2112      	movs	r1, #18
 80029b0:	f7ff ff78 	bl	80028a4 <std>
 80029b4:	2301      	movs	r3, #1
 80029b6:	61a3      	str	r3, [r4, #24]
 80029b8:	e7d2      	b.n	8002960 <__sinit+0xc>
 80029ba:	bf00      	nop
 80029bc:	08002fcc 	.word	0x08002fcc
 80029c0:	080028ed 	.word	0x080028ed

080029c4 <__sfp>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	4607      	mov	r7, r0
 80029c8:	f7ff ffac 	bl	8002924 <__sfp_lock_acquire>
 80029cc:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <__sfp+0x84>)
 80029ce:	681e      	ldr	r6, [r3, #0]
 80029d0:	69b3      	ldr	r3, [r6, #24]
 80029d2:	b913      	cbnz	r3, 80029da <__sfp+0x16>
 80029d4:	4630      	mov	r0, r6
 80029d6:	f7ff ffbd 	bl	8002954 <__sinit>
 80029da:	3648      	adds	r6, #72	; 0x48
 80029dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	d503      	bpl.n	80029ec <__sfp+0x28>
 80029e4:	6833      	ldr	r3, [r6, #0]
 80029e6:	b30b      	cbz	r3, 8002a2c <__sfp+0x68>
 80029e8:	6836      	ldr	r6, [r6, #0]
 80029ea:	e7f7      	b.n	80029dc <__sfp+0x18>
 80029ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80029f0:	b9d5      	cbnz	r5, 8002a28 <__sfp+0x64>
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <__sfp+0x88>)
 80029f4:	60e3      	str	r3, [r4, #12]
 80029f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80029fa:	6665      	str	r5, [r4, #100]	; 0x64
 80029fc:	f000 f847 	bl	8002a8e <__retarget_lock_init_recursive>
 8002a00:	f7ff ff96 	bl	8002930 <__sfp_lock_release>
 8002a04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002a08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002a0c:	6025      	str	r5, [r4, #0]
 8002a0e:	61a5      	str	r5, [r4, #24]
 8002a10:	2208      	movs	r2, #8
 8002a12:	4629      	mov	r1, r5
 8002a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a18:	f7ff fd44 	bl	80024a4 <memset>
 8002a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a24:	4620      	mov	r0, r4
 8002a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a28:	3468      	adds	r4, #104	; 0x68
 8002a2a:	e7d9      	b.n	80029e0 <__sfp+0x1c>
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	4638      	mov	r0, r7
 8002a30:	f7ff ff62 	bl	80028f8 <__sfmoreglue>
 8002a34:	4604      	mov	r4, r0
 8002a36:	6030      	str	r0, [r6, #0]
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d1d5      	bne.n	80029e8 <__sfp+0x24>
 8002a3c:	f7ff ff78 	bl	8002930 <__sfp_lock_release>
 8002a40:	230c      	movs	r3, #12
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	e7ee      	b.n	8002a24 <__sfp+0x60>
 8002a46:	bf00      	nop
 8002a48:	08002fcc 	.word	0x08002fcc
 8002a4c:	ffff0001 	.word	0xffff0001

08002a50 <_fwalk_reent>:
 8002a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a54:	4606      	mov	r6, r0
 8002a56:	4688      	mov	r8, r1
 8002a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a5c:	2700      	movs	r7, #0
 8002a5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a62:	f1b9 0901 	subs.w	r9, r9, #1
 8002a66:	d505      	bpl.n	8002a74 <_fwalk_reent+0x24>
 8002a68:	6824      	ldr	r4, [r4, #0]
 8002a6a:	2c00      	cmp	r4, #0
 8002a6c:	d1f7      	bne.n	8002a5e <_fwalk_reent+0xe>
 8002a6e:	4638      	mov	r0, r7
 8002a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a74:	89ab      	ldrh	r3, [r5, #12]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d907      	bls.n	8002a8a <_fwalk_reent+0x3a>
 8002a7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	d003      	beq.n	8002a8a <_fwalk_reent+0x3a>
 8002a82:	4629      	mov	r1, r5
 8002a84:	4630      	mov	r0, r6
 8002a86:	47c0      	blx	r8
 8002a88:	4307      	orrs	r7, r0
 8002a8a:	3568      	adds	r5, #104	; 0x68
 8002a8c:	e7e9      	b.n	8002a62 <_fwalk_reent+0x12>

08002a8e <__retarget_lock_init_recursive>:
 8002a8e:	4770      	bx	lr

08002a90 <__retarget_lock_acquire_recursive>:
 8002a90:	4770      	bx	lr

08002a92 <__retarget_lock_release_recursive>:
 8002a92:	4770      	bx	lr

08002a94 <__swhatbuf_r>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	460e      	mov	r6, r1
 8002a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a9c:	2900      	cmp	r1, #0
 8002a9e:	b096      	sub	sp, #88	; 0x58
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	461d      	mov	r5, r3
 8002aa4:	da08      	bge.n	8002ab8 <__swhatbuf_r+0x24>
 8002aa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	602a      	str	r2, [r5, #0]
 8002aae:	061a      	lsls	r2, r3, #24
 8002ab0:	d410      	bmi.n	8002ad4 <__swhatbuf_r+0x40>
 8002ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab6:	e00e      	b.n	8002ad6 <__swhatbuf_r+0x42>
 8002ab8:	466a      	mov	r2, sp
 8002aba:	f000 f9a7 	bl	8002e0c <_fstat_r>
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	dbf1      	blt.n	8002aa6 <__swhatbuf_r+0x12>
 8002ac2:	9a01      	ldr	r2, [sp, #4]
 8002ac4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ac8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002acc:	425a      	negs	r2, r3
 8002ace:	415a      	adcs	r2, r3
 8002ad0:	602a      	str	r2, [r5, #0]
 8002ad2:	e7ee      	b.n	8002ab2 <__swhatbuf_r+0x1e>
 8002ad4:	2340      	movs	r3, #64	; 0x40
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	6023      	str	r3, [r4, #0]
 8002ada:	b016      	add	sp, #88	; 0x58
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ae0 <__smakebuf_r>:
 8002ae0:	898b      	ldrh	r3, [r1, #12]
 8002ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ae4:	079d      	lsls	r5, r3, #30
 8002ae6:	4606      	mov	r6, r0
 8002ae8:	460c      	mov	r4, r1
 8002aea:	d507      	bpl.n	8002afc <__smakebuf_r+0x1c>
 8002aec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002af0:	6023      	str	r3, [r4, #0]
 8002af2:	6123      	str	r3, [r4, #16]
 8002af4:	2301      	movs	r3, #1
 8002af6:	6163      	str	r3, [r4, #20]
 8002af8:	b002      	add	sp, #8
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	ab01      	add	r3, sp, #4
 8002afe:	466a      	mov	r2, sp
 8002b00:	f7ff ffc8 	bl	8002a94 <__swhatbuf_r>
 8002b04:	9900      	ldr	r1, [sp, #0]
 8002b06:	4605      	mov	r5, r0
 8002b08:	4630      	mov	r0, r6
 8002b0a:	f000 f895 	bl	8002c38 <_malloc_r>
 8002b0e:	b948      	cbnz	r0, 8002b24 <__smakebuf_r+0x44>
 8002b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b14:	059a      	lsls	r2, r3, #22
 8002b16:	d4ef      	bmi.n	8002af8 <__smakebuf_r+0x18>
 8002b18:	f023 0303 	bic.w	r3, r3, #3
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	81a3      	strh	r3, [r4, #12]
 8002b22:	e7e3      	b.n	8002aec <__smakebuf_r+0xc>
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <__smakebuf_r+0x7c>)
 8002b26:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b28:	89a3      	ldrh	r3, [r4, #12]
 8002b2a:	6020      	str	r0, [r4, #0]
 8002b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b30:	81a3      	strh	r3, [r4, #12]
 8002b32:	9b00      	ldr	r3, [sp, #0]
 8002b34:	6163      	str	r3, [r4, #20]
 8002b36:	9b01      	ldr	r3, [sp, #4]
 8002b38:	6120      	str	r0, [r4, #16]
 8002b3a:	b15b      	cbz	r3, 8002b54 <__smakebuf_r+0x74>
 8002b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b40:	4630      	mov	r0, r6
 8002b42:	f000 f975 	bl	8002e30 <_isatty_r>
 8002b46:	b128      	cbz	r0, 8002b54 <__smakebuf_r+0x74>
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	81a3      	strh	r3, [r4, #12]
 8002b54:	89a0      	ldrh	r0, [r4, #12]
 8002b56:	4305      	orrs	r5, r0
 8002b58:	81a5      	strh	r5, [r4, #12]
 8002b5a:	e7cd      	b.n	8002af8 <__smakebuf_r+0x18>
 8002b5c:	080028ed 	.word	0x080028ed

08002b60 <_free_r>:
 8002b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d044      	beq.n	8002bf0 <_free_r+0x90>
 8002b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b6a:	9001      	str	r0, [sp, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f1a1 0404 	sub.w	r4, r1, #4
 8002b72:	bfb8      	it	lt
 8002b74:	18e4      	addlt	r4, r4, r3
 8002b76:	f000 f97d 	bl	8002e74 <__malloc_lock>
 8002b7a:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <_free_r+0x94>)
 8002b7c:	9801      	ldr	r0, [sp, #4]
 8002b7e:	6813      	ldr	r3, [r2, #0]
 8002b80:	b933      	cbnz	r3, 8002b90 <_free_r+0x30>
 8002b82:	6063      	str	r3, [r4, #4]
 8002b84:	6014      	str	r4, [r2, #0]
 8002b86:	b003      	add	sp, #12
 8002b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b8c:	f000 b978 	b.w	8002e80 <__malloc_unlock>
 8002b90:	42a3      	cmp	r3, r4
 8002b92:	d908      	bls.n	8002ba6 <_free_r+0x46>
 8002b94:	6825      	ldr	r5, [r4, #0]
 8002b96:	1961      	adds	r1, r4, r5
 8002b98:	428b      	cmp	r3, r1
 8002b9a:	bf01      	itttt	eq
 8002b9c:	6819      	ldreq	r1, [r3, #0]
 8002b9e:	685b      	ldreq	r3, [r3, #4]
 8002ba0:	1949      	addeq	r1, r1, r5
 8002ba2:	6021      	streq	r1, [r4, #0]
 8002ba4:	e7ed      	b.n	8002b82 <_free_r+0x22>
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	b10b      	cbz	r3, 8002bb0 <_free_r+0x50>
 8002bac:	42a3      	cmp	r3, r4
 8002bae:	d9fa      	bls.n	8002ba6 <_free_r+0x46>
 8002bb0:	6811      	ldr	r1, [r2, #0]
 8002bb2:	1855      	adds	r5, r2, r1
 8002bb4:	42a5      	cmp	r5, r4
 8002bb6:	d10b      	bne.n	8002bd0 <_free_r+0x70>
 8002bb8:	6824      	ldr	r4, [r4, #0]
 8002bba:	4421      	add	r1, r4
 8002bbc:	1854      	adds	r4, r2, r1
 8002bbe:	42a3      	cmp	r3, r4
 8002bc0:	6011      	str	r1, [r2, #0]
 8002bc2:	d1e0      	bne.n	8002b86 <_free_r+0x26>
 8002bc4:	681c      	ldr	r4, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	6053      	str	r3, [r2, #4]
 8002bca:	4421      	add	r1, r4
 8002bcc:	6011      	str	r1, [r2, #0]
 8002bce:	e7da      	b.n	8002b86 <_free_r+0x26>
 8002bd0:	d902      	bls.n	8002bd8 <_free_r+0x78>
 8002bd2:	230c      	movs	r3, #12
 8002bd4:	6003      	str	r3, [r0, #0]
 8002bd6:	e7d6      	b.n	8002b86 <_free_r+0x26>
 8002bd8:	6825      	ldr	r5, [r4, #0]
 8002bda:	1961      	adds	r1, r4, r5
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	bf04      	itt	eq
 8002be0:	6819      	ldreq	r1, [r3, #0]
 8002be2:	685b      	ldreq	r3, [r3, #4]
 8002be4:	6063      	str	r3, [r4, #4]
 8002be6:	bf04      	itt	eq
 8002be8:	1949      	addeq	r1, r1, r5
 8002bea:	6021      	streq	r1, [r4, #0]
 8002bec:	6054      	str	r4, [r2, #4]
 8002bee:	e7ca      	b.n	8002b86 <_free_r+0x26>
 8002bf0:	b003      	add	sp, #12
 8002bf2:	bd30      	pop	{r4, r5, pc}
 8002bf4:	20000144 	.word	0x20000144

08002bf8 <sbrk_aligned>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	4e0e      	ldr	r6, [pc, #56]	; (8002c34 <sbrk_aligned+0x3c>)
 8002bfc:	460c      	mov	r4, r1
 8002bfe:	6831      	ldr	r1, [r6, #0]
 8002c00:	4605      	mov	r5, r0
 8002c02:	b911      	cbnz	r1, 8002c0a <sbrk_aligned+0x12>
 8002c04:	f000 f88c 	bl	8002d20 <_sbrk_r>
 8002c08:	6030      	str	r0, [r6, #0]
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	f000 f887 	bl	8002d20 <_sbrk_r>
 8002c12:	1c43      	adds	r3, r0, #1
 8002c14:	d00a      	beq.n	8002c2c <sbrk_aligned+0x34>
 8002c16:	1cc4      	adds	r4, r0, #3
 8002c18:	f024 0403 	bic.w	r4, r4, #3
 8002c1c:	42a0      	cmp	r0, r4
 8002c1e:	d007      	beq.n	8002c30 <sbrk_aligned+0x38>
 8002c20:	1a21      	subs	r1, r4, r0
 8002c22:	4628      	mov	r0, r5
 8002c24:	f000 f87c 	bl	8002d20 <_sbrk_r>
 8002c28:	3001      	adds	r0, #1
 8002c2a:	d101      	bne.n	8002c30 <sbrk_aligned+0x38>
 8002c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c30:	4620      	mov	r0, r4
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
 8002c34:	20000148 	.word	0x20000148

08002c38 <_malloc_r>:
 8002c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c3c:	1ccd      	adds	r5, r1, #3
 8002c3e:	f025 0503 	bic.w	r5, r5, #3
 8002c42:	3508      	adds	r5, #8
 8002c44:	2d0c      	cmp	r5, #12
 8002c46:	bf38      	it	cc
 8002c48:	250c      	movcc	r5, #12
 8002c4a:	2d00      	cmp	r5, #0
 8002c4c:	4607      	mov	r7, r0
 8002c4e:	db01      	blt.n	8002c54 <_malloc_r+0x1c>
 8002c50:	42a9      	cmp	r1, r5
 8002c52:	d905      	bls.n	8002c60 <_malloc_r+0x28>
 8002c54:	230c      	movs	r3, #12
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	2600      	movs	r6, #0
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c60:	4e2e      	ldr	r6, [pc, #184]	; (8002d1c <_malloc_r+0xe4>)
 8002c62:	f000 f907 	bl	8002e74 <__malloc_lock>
 8002c66:	6833      	ldr	r3, [r6, #0]
 8002c68:	461c      	mov	r4, r3
 8002c6a:	bb34      	cbnz	r4, 8002cba <_malloc_r+0x82>
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	4638      	mov	r0, r7
 8002c70:	f7ff ffc2 	bl	8002bf8 <sbrk_aligned>
 8002c74:	1c43      	adds	r3, r0, #1
 8002c76:	4604      	mov	r4, r0
 8002c78:	d14d      	bne.n	8002d16 <_malloc_r+0xde>
 8002c7a:	6834      	ldr	r4, [r6, #0]
 8002c7c:	4626      	mov	r6, r4
 8002c7e:	2e00      	cmp	r6, #0
 8002c80:	d140      	bne.n	8002d04 <_malloc_r+0xcc>
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	4631      	mov	r1, r6
 8002c86:	4638      	mov	r0, r7
 8002c88:	eb04 0803 	add.w	r8, r4, r3
 8002c8c:	f000 f848 	bl	8002d20 <_sbrk_r>
 8002c90:	4580      	cmp	r8, r0
 8002c92:	d13a      	bne.n	8002d0a <_malloc_r+0xd2>
 8002c94:	6821      	ldr	r1, [r4, #0]
 8002c96:	3503      	adds	r5, #3
 8002c98:	1a6d      	subs	r5, r5, r1
 8002c9a:	f025 0503 	bic.w	r5, r5, #3
 8002c9e:	3508      	adds	r5, #8
 8002ca0:	2d0c      	cmp	r5, #12
 8002ca2:	bf38      	it	cc
 8002ca4:	250c      	movcc	r5, #12
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	4638      	mov	r0, r7
 8002caa:	f7ff ffa5 	bl	8002bf8 <sbrk_aligned>
 8002cae:	3001      	adds	r0, #1
 8002cb0:	d02b      	beq.n	8002d0a <_malloc_r+0xd2>
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	442b      	add	r3, r5
 8002cb6:	6023      	str	r3, [r4, #0]
 8002cb8:	e00e      	b.n	8002cd8 <_malloc_r+0xa0>
 8002cba:	6822      	ldr	r2, [r4, #0]
 8002cbc:	1b52      	subs	r2, r2, r5
 8002cbe:	d41e      	bmi.n	8002cfe <_malloc_r+0xc6>
 8002cc0:	2a0b      	cmp	r2, #11
 8002cc2:	d916      	bls.n	8002cf2 <_malloc_r+0xba>
 8002cc4:	1961      	adds	r1, r4, r5
 8002cc6:	42a3      	cmp	r3, r4
 8002cc8:	6025      	str	r5, [r4, #0]
 8002cca:	bf18      	it	ne
 8002ccc:	6059      	strne	r1, [r3, #4]
 8002cce:	6863      	ldr	r3, [r4, #4]
 8002cd0:	bf08      	it	eq
 8002cd2:	6031      	streq	r1, [r6, #0]
 8002cd4:	5162      	str	r2, [r4, r5]
 8002cd6:	604b      	str	r3, [r1, #4]
 8002cd8:	4638      	mov	r0, r7
 8002cda:	f104 060b 	add.w	r6, r4, #11
 8002cde:	f000 f8cf 	bl	8002e80 <__malloc_unlock>
 8002ce2:	f026 0607 	bic.w	r6, r6, #7
 8002ce6:	1d23      	adds	r3, r4, #4
 8002ce8:	1af2      	subs	r2, r6, r3
 8002cea:	d0b6      	beq.n	8002c5a <_malloc_r+0x22>
 8002cec:	1b9b      	subs	r3, r3, r6
 8002cee:	50a3      	str	r3, [r4, r2]
 8002cf0:	e7b3      	b.n	8002c5a <_malloc_r+0x22>
 8002cf2:	6862      	ldr	r2, [r4, #4]
 8002cf4:	42a3      	cmp	r3, r4
 8002cf6:	bf0c      	ite	eq
 8002cf8:	6032      	streq	r2, [r6, #0]
 8002cfa:	605a      	strne	r2, [r3, #4]
 8002cfc:	e7ec      	b.n	8002cd8 <_malloc_r+0xa0>
 8002cfe:	4623      	mov	r3, r4
 8002d00:	6864      	ldr	r4, [r4, #4]
 8002d02:	e7b2      	b.n	8002c6a <_malloc_r+0x32>
 8002d04:	4634      	mov	r4, r6
 8002d06:	6876      	ldr	r6, [r6, #4]
 8002d08:	e7b9      	b.n	8002c7e <_malloc_r+0x46>
 8002d0a:	230c      	movs	r3, #12
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4638      	mov	r0, r7
 8002d10:	f000 f8b6 	bl	8002e80 <__malloc_unlock>
 8002d14:	e7a1      	b.n	8002c5a <_malloc_r+0x22>
 8002d16:	6025      	str	r5, [r4, #0]
 8002d18:	e7de      	b.n	8002cd8 <_malloc_r+0xa0>
 8002d1a:	bf00      	nop
 8002d1c:	20000144 	.word	0x20000144

08002d20 <_sbrk_r>:
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	4d06      	ldr	r5, [pc, #24]	; (8002d3c <_sbrk_r+0x1c>)
 8002d24:	2300      	movs	r3, #0
 8002d26:	4604      	mov	r4, r0
 8002d28:	4608      	mov	r0, r1
 8002d2a:	602b      	str	r3, [r5, #0]
 8002d2c:	f7fe f8b6 	bl	8000e9c <_sbrk>
 8002d30:	1c43      	adds	r3, r0, #1
 8002d32:	d102      	bne.n	8002d3a <_sbrk_r+0x1a>
 8002d34:	682b      	ldr	r3, [r5, #0]
 8002d36:	b103      	cbz	r3, 8002d3a <_sbrk_r+0x1a>
 8002d38:	6023      	str	r3, [r4, #0]
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
 8002d3c:	2000014c 	.word	0x2000014c

08002d40 <__sread>:
 8002d40:	b510      	push	{r4, lr}
 8002d42:	460c      	mov	r4, r1
 8002d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d48:	f000 f8a0 	bl	8002e8c <_read_r>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	bfab      	itete	ge
 8002d50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d52:	89a3      	ldrhlt	r3, [r4, #12]
 8002d54:	181b      	addge	r3, r3, r0
 8002d56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d5a:	bfac      	ite	ge
 8002d5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d5e:	81a3      	strhlt	r3, [r4, #12]
 8002d60:	bd10      	pop	{r4, pc}

08002d62 <__swrite>:
 8002d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d66:	461f      	mov	r7, r3
 8002d68:	898b      	ldrh	r3, [r1, #12]
 8002d6a:	05db      	lsls	r3, r3, #23
 8002d6c:	4605      	mov	r5, r0
 8002d6e:	460c      	mov	r4, r1
 8002d70:	4616      	mov	r6, r2
 8002d72:	d505      	bpl.n	8002d80 <__swrite+0x1e>
 8002d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d78:	2302      	movs	r3, #2
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f000 f868 	bl	8002e50 <_lseek_r>
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d8a:	81a3      	strh	r3, [r4, #12]
 8002d8c:	4632      	mov	r2, r6
 8002d8e:	463b      	mov	r3, r7
 8002d90:	4628      	mov	r0, r5
 8002d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d96:	f000 b817 	b.w	8002dc8 <_write_r>

08002d9a <__sseek>:
 8002d9a:	b510      	push	{r4, lr}
 8002d9c:	460c      	mov	r4, r1
 8002d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002da2:	f000 f855 	bl	8002e50 <_lseek_r>
 8002da6:	1c43      	adds	r3, r0, #1
 8002da8:	89a3      	ldrh	r3, [r4, #12]
 8002daa:	bf15      	itete	ne
 8002dac:	6560      	strne	r0, [r4, #84]	; 0x54
 8002dae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002db2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002db6:	81a3      	strheq	r3, [r4, #12]
 8002db8:	bf18      	it	ne
 8002dba:	81a3      	strhne	r3, [r4, #12]
 8002dbc:	bd10      	pop	{r4, pc}

08002dbe <__sclose>:
 8002dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dc2:	f000 b813 	b.w	8002dec <_close_r>
	...

08002dc8 <_write_r>:
 8002dc8:	b538      	push	{r3, r4, r5, lr}
 8002dca:	4d07      	ldr	r5, [pc, #28]	; (8002de8 <_write_r+0x20>)
 8002dcc:	4604      	mov	r4, r0
 8002dce:	4608      	mov	r0, r1
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	602a      	str	r2, [r5, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f7fe f80f 	bl	8000dfa <_write>
 8002ddc:	1c43      	adds	r3, r0, #1
 8002dde:	d102      	bne.n	8002de6 <_write_r+0x1e>
 8002de0:	682b      	ldr	r3, [r5, #0]
 8002de2:	b103      	cbz	r3, 8002de6 <_write_r+0x1e>
 8002de4:	6023      	str	r3, [r4, #0]
 8002de6:	bd38      	pop	{r3, r4, r5, pc}
 8002de8:	2000014c 	.word	0x2000014c

08002dec <_close_r>:
 8002dec:	b538      	push	{r3, r4, r5, lr}
 8002dee:	4d06      	ldr	r5, [pc, #24]	; (8002e08 <_close_r+0x1c>)
 8002df0:	2300      	movs	r3, #0
 8002df2:	4604      	mov	r4, r0
 8002df4:	4608      	mov	r0, r1
 8002df6:	602b      	str	r3, [r5, #0]
 8002df8:	f7fe f81b 	bl	8000e32 <_close>
 8002dfc:	1c43      	adds	r3, r0, #1
 8002dfe:	d102      	bne.n	8002e06 <_close_r+0x1a>
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	b103      	cbz	r3, 8002e06 <_close_r+0x1a>
 8002e04:	6023      	str	r3, [r4, #0]
 8002e06:	bd38      	pop	{r3, r4, r5, pc}
 8002e08:	2000014c 	.word	0x2000014c

08002e0c <_fstat_r>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4d07      	ldr	r5, [pc, #28]	; (8002e2c <_fstat_r+0x20>)
 8002e10:	2300      	movs	r3, #0
 8002e12:	4604      	mov	r4, r0
 8002e14:	4608      	mov	r0, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	602b      	str	r3, [r5, #0]
 8002e1a:	f7fe f816 	bl	8000e4a <_fstat>
 8002e1e:	1c43      	adds	r3, r0, #1
 8002e20:	d102      	bne.n	8002e28 <_fstat_r+0x1c>
 8002e22:	682b      	ldr	r3, [r5, #0]
 8002e24:	b103      	cbz	r3, 8002e28 <_fstat_r+0x1c>
 8002e26:	6023      	str	r3, [r4, #0]
 8002e28:	bd38      	pop	{r3, r4, r5, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2000014c 	.word	0x2000014c

08002e30 <_isatty_r>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	4d06      	ldr	r5, [pc, #24]	; (8002e4c <_isatty_r+0x1c>)
 8002e34:	2300      	movs	r3, #0
 8002e36:	4604      	mov	r4, r0
 8002e38:	4608      	mov	r0, r1
 8002e3a:	602b      	str	r3, [r5, #0]
 8002e3c:	f7fe f815 	bl	8000e6a <_isatty>
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d102      	bne.n	8002e4a <_isatty_r+0x1a>
 8002e44:	682b      	ldr	r3, [r5, #0]
 8002e46:	b103      	cbz	r3, 8002e4a <_isatty_r+0x1a>
 8002e48:	6023      	str	r3, [r4, #0]
 8002e4a:	bd38      	pop	{r3, r4, r5, pc}
 8002e4c:	2000014c 	.word	0x2000014c

08002e50 <_lseek_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4d07      	ldr	r5, [pc, #28]	; (8002e70 <_lseek_r+0x20>)
 8002e54:	4604      	mov	r4, r0
 8002e56:	4608      	mov	r0, r1
 8002e58:	4611      	mov	r1, r2
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	602a      	str	r2, [r5, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f7fe f80e 	bl	8000e80 <_lseek>
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	d102      	bne.n	8002e6e <_lseek_r+0x1e>
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	b103      	cbz	r3, 8002e6e <_lseek_r+0x1e>
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	bd38      	pop	{r3, r4, r5, pc}
 8002e70:	2000014c 	.word	0x2000014c

08002e74 <__malloc_lock>:
 8002e74:	4801      	ldr	r0, [pc, #4]	; (8002e7c <__malloc_lock+0x8>)
 8002e76:	f7ff be0b 	b.w	8002a90 <__retarget_lock_acquire_recursive>
 8002e7a:	bf00      	nop
 8002e7c:	20000140 	.word	0x20000140

08002e80 <__malloc_unlock>:
 8002e80:	4801      	ldr	r0, [pc, #4]	; (8002e88 <__malloc_unlock+0x8>)
 8002e82:	f7ff be06 	b.w	8002a92 <__retarget_lock_release_recursive>
 8002e86:	bf00      	nop
 8002e88:	20000140 	.word	0x20000140

08002e8c <_read_r>:
 8002e8c:	b538      	push	{r3, r4, r5, lr}
 8002e8e:	4d07      	ldr	r5, [pc, #28]	; (8002eac <_read_r+0x20>)
 8002e90:	4604      	mov	r4, r0
 8002e92:	4608      	mov	r0, r1
 8002e94:	4611      	mov	r1, r2
 8002e96:	2200      	movs	r2, #0
 8002e98:	602a      	str	r2, [r5, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f7fd ff90 	bl	8000dc0 <_read>
 8002ea0:	1c43      	adds	r3, r0, #1
 8002ea2:	d102      	bne.n	8002eaa <_read_r+0x1e>
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	b103      	cbz	r3, 8002eaa <_read_r+0x1e>
 8002ea8:	6023      	str	r3, [r4, #0]
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	2000014c 	.word	0x2000014c

08002eb0 <_init>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr

08002ebc <_fini>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr
